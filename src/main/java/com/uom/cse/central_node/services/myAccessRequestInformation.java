package com.uom.cse.central_node.services;


import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-12-28")
public class myAccessRequestInformation implements org.apache.thrift.TBase<myAccessRequestInformation, myAccessRequestInformation._Fields>, java.io.Serializable, Cloneable, Comparable<myAccessRequestInformation> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("myAccessRequestInformation");

  private static final org.apache.thrift.protocol.TField TRANSACTION__ID_FIELD_DESC = new org.apache.thrift.protocol.TField("Transaction_ID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ACCESSES_FIELD_DESC = new org.apache.thrift.protocol.TField("Accesses", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ACCESS__REASONS_FIELD_DESC = new org.apache.thrift.protocol.TField("Access_Reasons", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ACCESS__MASK_FIELD_DESC = new org.apache.thrift.protocol.TField("Access_Mask", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PRIVILEGES__USED__FOR__ACCESS__CHECK_FIELD_DESC = new org.apache.thrift.protocol.TField("Privileges_Used_For_Access_Check", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField RESTRICTED__SID__COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("Restricted_SID_Count", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new myAccessRequestInformationStandardSchemeFactory());
    schemes.put(TupleScheme.class, new myAccessRequestInformationTupleSchemeFactory());
  }

  public String Transaction_ID; // required
  public String Accesses; // required
  public String Access_Reasons; // required
  public String Access_Mask; // required
  public String Privileges_Used_For_Access_Check; // required
  public String Restricted_SID_Count; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TRANSACTION__ID((short)1, "Transaction_ID"),
    ACCESSES((short)2, "Accesses"),
    ACCESS__REASONS((short)3, "Access_Reasons"),
    ACCESS__MASK((short)4, "Access_Mask"),
    PRIVILEGES__USED__FOR__ACCESS__CHECK((short)5, "Privileges_Used_For_Access_Check"),
    RESTRICTED__SID__COUNT((short)6, "Restricted_SID_Count");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TRANSACTION__ID
          return TRANSACTION__ID;
        case 2: // ACCESSES
          return ACCESSES;
        case 3: // ACCESS__REASONS
          return ACCESS__REASONS;
        case 4: // ACCESS__MASK
          return ACCESS__MASK;
        case 5: // PRIVILEGES__USED__FOR__ACCESS__CHECK
          return PRIVILEGES__USED__FOR__ACCESS__CHECK;
        case 6: // RESTRICTED__SID__COUNT
          return RESTRICTED__SID__COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TRANSACTION__ID, new org.apache.thrift.meta_data.FieldMetaData("Transaction_ID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCESSES, new org.apache.thrift.meta_data.FieldMetaData("Accesses", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCESS__REASONS, new org.apache.thrift.meta_data.FieldMetaData("Access_Reasons", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCESS__MASK, new org.apache.thrift.meta_data.FieldMetaData("Access_Mask", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRIVILEGES__USED__FOR__ACCESS__CHECK, new org.apache.thrift.meta_data.FieldMetaData("Privileges_Used_For_Access_Check", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESTRICTED__SID__COUNT, new org.apache.thrift.meta_data.FieldMetaData("Restricted_SID_Count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(myAccessRequestInformation.class, metaDataMap);
  }

  public myAccessRequestInformation() {
  }

  public myAccessRequestInformation(
    String Transaction_ID,
    String Accesses,
    String Access_Reasons,
    String Access_Mask,
    String Privileges_Used_For_Access_Check,
    String Restricted_SID_Count)
  {
    this();
    this.Transaction_ID = Transaction_ID;
    this.Accesses = Accesses;
    this.Access_Reasons = Access_Reasons;
    this.Access_Mask = Access_Mask;
    this.Privileges_Used_For_Access_Check = Privileges_Used_For_Access_Check;
    this.Restricted_SID_Count = Restricted_SID_Count;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public myAccessRequestInformation(myAccessRequestInformation other) {
    if (other.isSetTransaction_ID()) {
      this.Transaction_ID = other.Transaction_ID;
    }
    if (other.isSetAccesses()) {
      this.Accesses = other.Accesses;
    }
    if (other.isSetAccess_Reasons()) {
      this.Access_Reasons = other.Access_Reasons;
    }
    if (other.isSetAccess_Mask()) {
      this.Access_Mask = other.Access_Mask;
    }
    if (other.isSetPrivileges_Used_For_Access_Check()) {
      this.Privileges_Used_For_Access_Check = other.Privileges_Used_For_Access_Check;
    }
    if (other.isSetRestricted_SID_Count()) {
      this.Restricted_SID_Count = other.Restricted_SID_Count;
    }
  }

  public myAccessRequestInformation deepCopy() {
    return new myAccessRequestInformation(this);
  }

  @Override
  public void clear() {
    this.Transaction_ID = null;
    this.Accesses = null;
    this.Access_Reasons = null;
    this.Access_Mask = null;
    this.Privileges_Used_For_Access_Check = null;
    this.Restricted_SID_Count = null;
  }

  public String getTransaction_ID() {
    return this.Transaction_ID;
  }

  public myAccessRequestInformation setTransaction_ID(String Transaction_ID) {
    this.Transaction_ID = Transaction_ID;
    return this;
  }

  public void unsetTransaction_ID() {
    this.Transaction_ID = null;
  }

  /** Returns true if field Transaction_ID is set (has been assigned a value) and false otherwise */
  public boolean isSetTransaction_ID() {
    return this.Transaction_ID != null;
  }

  public void setTransaction_IDIsSet(boolean value) {
    if (!value) {
      this.Transaction_ID = null;
    }
  }

  public String getAccesses() {
    return this.Accesses;
  }

  public myAccessRequestInformation setAccesses(String Accesses) {
    this.Accesses = Accesses;
    return this;
  }

  public void unsetAccesses() {
    this.Accesses = null;
  }

  /** Returns true if field Accesses is set (has been assigned a value) and false otherwise */
  public boolean isSetAccesses() {
    return this.Accesses != null;
  }

  public void setAccessesIsSet(boolean value) {
    if (!value) {
      this.Accesses = null;
    }
  }

  public String getAccess_Reasons() {
    return this.Access_Reasons;
  }

  public myAccessRequestInformation setAccess_Reasons(String Access_Reasons) {
    this.Access_Reasons = Access_Reasons;
    return this;
  }

  public void unsetAccess_Reasons() {
    this.Access_Reasons = null;
  }

  /** Returns true if field Access_Reasons is set (has been assigned a value) and false otherwise */
  public boolean isSetAccess_Reasons() {
    return this.Access_Reasons != null;
  }

  public void setAccess_ReasonsIsSet(boolean value) {
    if (!value) {
      this.Access_Reasons = null;
    }
  }

  public String getAccess_Mask() {
    return this.Access_Mask;
  }

  public myAccessRequestInformation setAccess_Mask(String Access_Mask) {
    this.Access_Mask = Access_Mask;
    return this;
  }

  public void unsetAccess_Mask() {
    this.Access_Mask = null;
  }

  /** Returns true if field Access_Mask is set (has been assigned a value) and false otherwise */
  public boolean isSetAccess_Mask() {
    return this.Access_Mask != null;
  }

  public void setAccess_MaskIsSet(boolean value) {
    if (!value) {
      this.Access_Mask = null;
    }
  }

  public String getPrivileges_Used_For_Access_Check() {
    return this.Privileges_Used_For_Access_Check;
  }

  public myAccessRequestInformation setPrivileges_Used_For_Access_Check(String Privileges_Used_For_Access_Check) {
    this.Privileges_Used_For_Access_Check = Privileges_Used_For_Access_Check;
    return this;
  }

  public void unsetPrivileges_Used_For_Access_Check() {
    this.Privileges_Used_For_Access_Check = null;
  }

  /** Returns true if field Privileges_Used_For_Access_Check is set (has been assigned a value) and false otherwise */
  public boolean isSetPrivileges_Used_For_Access_Check() {
    return this.Privileges_Used_For_Access_Check != null;
  }

  public void setPrivileges_Used_For_Access_CheckIsSet(boolean value) {
    if (!value) {
      this.Privileges_Used_For_Access_Check = null;
    }
  }

  public String getRestricted_SID_Count() {
    return this.Restricted_SID_Count;
  }

  public myAccessRequestInformation setRestricted_SID_Count(String Restricted_SID_Count) {
    this.Restricted_SID_Count = Restricted_SID_Count;
    return this;
  }

  public void unsetRestricted_SID_Count() {
    this.Restricted_SID_Count = null;
  }

  /** Returns true if field Restricted_SID_Count is set (has been assigned a value) and false otherwise */
  public boolean isSetRestricted_SID_Count() {
    return this.Restricted_SID_Count != null;
  }

  public void setRestricted_SID_CountIsSet(boolean value) {
    if (!value) {
      this.Restricted_SID_Count = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TRANSACTION__ID:
      if (value == null) {
        unsetTransaction_ID();
      } else {
        setTransaction_ID((String)value);
      }
      break;

    case ACCESSES:
      if (value == null) {
        unsetAccesses();
      } else {
        setAccesses((String)value);
      }
      break;

    case ACCESS__REASONS:
      if (value == null) {
        unsetAccess_Reasons();
      } else {
        setAccess_Reasons((String)value);
      }
      break;

    case ACCESS__MASK:
      if (value == null) {
        unsetAccess_Mask();
      } else {
        setAccess_Mask((String)value);
      }
      break;

    case PRIVILEGES__USED__FOR__ACCESS__CHECK:
      if (value == null) {
        unsetPrivileges_Used_For_Access_Check();
      } else {
        setPrivileges_Used_For_Access_Check((String)value);
      }
      break;

    case RESTRICTED__SID__COUNT:
      if (value == null) {
        unsetRestricted_SID_Count();
      } else {
        setRestricted_SID_Count((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TRANSACTION__ID:
      return getTransaction_ID();

    case ACCESSES:
      return getAccesses();

    case ACCESS__REASONS:
      return getAccess_Reasons();

    case ACCESS__MASK:
      return getAccess_Mask();

    case PRIVILEGES__USED__FOR__ACCESS__CHECK:
      return getPrivileges_Used_For_Access_Check();

    case RESTRICTED__SID__COUNT:
      return getRestricted_SID_Count();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TRANSACTION__ID:
      return isSetTransaction_ID();
    case ACCESSES:
      return isSetAccesses();
    case ACCESS__REASONS:
      return isSetAccess_Reasons();
    case ACCESS__MASK:
      return isSetAccess_Mask();
    case PRIVILEGES__USED__FOR__ACCESS__CHECK:
      return isSetPrivileges_Used_For_Access_Check();
    case RESTRICTED__SID__COUNT:
      return isSetRestricted_SID_Count();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof myAccessRequestInformation)
      return this.equals((myAccessRequestInformation)that);
    return false;
  }

  public boolean equals(myAccessRequestInformation that) {
    if (that == null)
      return false;

    boolean this_present_Transaction_ID = true && this.isSetTransaction_ID();
    boolean that_present_Transaction_ID = true && that.isSetTransaction_ID();
    if (this_present_Transaction_ID || that_present_Transaction_ID) {
      if (!(this_present_Transaction_ID && that_present_Transaction_ID))
        return false;
      if (!this.Transaction_ID.equals(that.Transaction_ID))
        return false;
    }

    boolean this_present_Accesses = true && this.isSetAccesses();
    boolean that_present_Accesses = true && that.isSetAccesses();
    if (this_present_Accesses || that_present_Accesses) {
      if (!(this_present_Accesses && that_present_Accesses))
        return false;
      if (!this.Accesses.equals(that.Accesses))
        return false;
    }

    boolean this_present_Access_Reasons = true && this.isSetAccess_Reasons();
    boolean that_present_Access_Reasons = true && that.isSetAccess_Reasons();
    if (this_present_Access_Reasons || that_present_Access_Reasons) {
      if (!(this_present_Access_Reasons && that_present_Access_Reasons))
        return false;
      if (!this.Access_Reasons.equals(that.Access_Reasons))
        return false;
    }

    boolean this_present_Access_Mask = true && this.isSetAccess_Mask();
    boolean that_present_Access_Mask = true && that.isSetAccess_Mask();
    if (this_present_Access_Mask || that_present_Access_Mask) {
      if (!(this_present_Access_Mask && that_present_Access_Mask))
        return false;
      if (!this.Access_Mask.equals(that.Access_Mask))
        return false;
    }

    boolean this_present_Privileges_Used_For_Access_Check = true && this.isSetPrivileges_Used_For_Access_Check();
    boolean that_present_Privileges_Used_For_Access_Check = true && that.isSetPrivileges_Used_For_Access_Check();
    if (this_present_Privileges_Used_For_Access_Check || that_present_Privileges_Used_For_Access_Check) {
      if (!(this_present_Privileges_Used_For_Access_Check && that_present_Privileges_Used_For_Access_Check))
        return false;
      if (!this.Privileges_Used_For_Access_Check.equals(that.Privileges_Used_For_Access_Check))
        return false;
    }

    boolean this_present_Restricted_SID_Count = true && this.isSetRestricted_SID_Count();
    boolean that_present_Restricted_SID_Count = true && that.isSetRestricted_SID_Count();
    if (this_present_Restricted_SID_Count || that_present_Restricted_SID_Count) {
      if (!(this_present_Restricted_SID_Count && that_present_Restricted_SID_Count))
        return false;
      if (!this.Restricted_SID_Count.equals(that.Restricted_SID_Count))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_Transaction_ID = true && (isSetTransaction_ID());
    list.add(present_Transaction_ID);
    if (present_Transaction_ID)
      list.add(Transaction_ID);

    boolean present_Accesses = true && (isSetAccesses());
    list.add(present_Accesses);
    if (present_Accesses)
      list.add(Accesses);

    boolean present_Access_Reasons = true && (isSetAccess_Reasons());
    list.add(present_Access_Reasons);
    if (present_Access_Reasons)
      list.add(Access_Reasons);

    boolean present_Access_Mask = true && (isSetAccess_Mask());
    list.add(present_Access_Mask);
    if (present_Access_Mask)
      list.add(Access_Mask);

    boolean present_Privileges_Used_For_Access_Check = true && (isSetPrivileges_Used_For_Access_Check());
    list.add(present_Privileges_Used_For_Access_Check);
    if (present_Privileges_Used_For_Access_Check)
      list.add(Privileges_Used_For_Access_Check);

    boolean present_Restricted_SID_Count = true && (isSetRestricted_SID_Count());
    list.add(present_Restricted_SID_Count);
    if (present_Restricted_SID_Count)
      list.add(Restricted_SID_Count);

    return list.hashCode();
  }

  @Override
  public int compareTo(myAccessRequestInformation other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTransaction_ID()).compareTo(other.isSetTransaction_ID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransaction_ID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Transaction_ID, other.Transaction_ID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccesses()).compareTo(other.isSetAccesses());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccesses()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Accesses, other.Accesses);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccess_Reasons()).compareTo(other.isSetAccess_Reasons());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccess_Reasons()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Access_Reasons, other.Access_Reasons);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccess_Mask()).compareTo(other.isSetAccess_Mask());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccess_Mask()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Access_Mask, other.Access_Mask);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrivileges_Used_For_Access_Check()).compareTo(other.isSetPrivileges_Used_For_Access_Check());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrivileges_Used_For_Access_Check()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Privileges_Used_For_Access_Check, other.Privileges_Used_For_Access_Check);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRestricted_SID_Count()).compareTo(other.isSetRestricted_SID_Count());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRestricted_SID_Count()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Restricted_SID_Count, other.Restricted_SID_Count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("myAccessRequestInformation(");
    boolean first = true;

    sb.append("Transaction_ID:");
    if (this.Transaction_ID == null) {
      sb.append("null");
    } else {
      sb.append(this.Transaction_ID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Accesses:");
    if (this.Accesses == null) {
      sb.append("null");
    } else {
      sb.append(this.Accesses);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Access_Reasons:");
    if (this.Access_Reasons == null) {
      sb.append("null");
    } else {
      sb.append(this.Access_Reasons);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Access_Mask:");
    if (this.Access_Mask == null) {
      sb.append("null");
    } else {
      sb.append(this.Access_Mask);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Privileges_Used_For_Access_Check:");
    if (this.Privileges_Used_For_Access_Check == null) {
      sb.append("null");
    } else {
      sb.append(this.Privileges_Used_For_Access_Check);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Restricted_SID_Count:");
    if (this.Restricted_SID_Count == null) {
      sb.append("null");
    } else {
      sb.append(this.Restricted_SID_Count);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class myAccessRequestInformationStandardSchemeFactory implements SchemeFactory {
    public myAccessRequestInformationStandardScheme getScheme() {
      return new myAccessRequestInformationStandardScheme();
    }
  }

  private static class myAccessRequestInformationStandardScheme extends StandardScheme<myAccessRequestInformation> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, myAccessRequestInformation struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TRANSACTION__ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Transaction_ID = iprot.readString();
              struct.setTransaction_IDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ACCESSES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Accesses = iprot.readString();
              struct.setAccessesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ACCESS__REASONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Access_Reasons = iprot.readString();
              struct.setAccess_ReasonsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ACCESS__MASK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Access_Mask = iprot.readString();
              struct.setAccess_MaskIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PRIVILEGES__USED__FOR__ACCESS__CHECK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Privileges_Used_For_Access_Check = iprot.readString();
              struct.setPrivileges_Used_For_Access_CheckIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RESTRICTED__SID__COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Restricted_SID_Count = iprot.readString();
              struct.setRestricted_SID_CountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, myAccessRequestInformation struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.Transaction_ID != null) {
        oprot.writeFieldBegin(TRANSACTION__ID_FIELD_DESC);
        oprot.writeString(struct.Transaction_ID);
        oprot.writeFieldEnd();
      }
      if (struct.Accesses != null) {
        oprot.writeFieldBegin(ACCESSES_FIELD_DESC);
        oprot.writeString(struct.Accesses);
        oprot.writeFieldEnd();
      }
      if (struct.Access_Reasons != null) {
        oprot.writeFieldBegin(ACCESS__REASONS_FIELD_DESC);
        oprot.writeString(struct.Access_Reasons);
        oprot.writeFieldEnd();
      }
      if (struct.Access_Mask != null) {
        oprot.writeFieldBegin(ACCESS__MASK_FIELD_DESC);
        oprot.writeString(struct.Access_Mask);
        oprot.writeFieldEnd();
      }
      if (struct.Privileges_Used_For_Access_Check != null) {
        oprot.writeFieldBegin(PRIVILEGES__USED__FOR__ACCESS__CHECK_FIELD_DESC);
        oprot.writeString(struct.Privileges_Used_For_Access_Check);
        oprot.writeFieldEnd();
      }
      if (struct.Restricted_SID_Count != null) {
        oprot.writeFieldBegin(RESTRICTED__SID__COUNT_FIELD_DESC);
        oprot.writeString(struct.Restricted_SID_Count);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class myAccessRequestInformationTupleSchemeFactory implements SchemeFactory {
    public myAccessRequestInformationTupleScheme getScheme() {
      return new myAccessRequestInformationTupleScheme();
    }
  }

  private static class myAccessRequestInformationTupleScheme extends TupleScheme<myAccessRequestInformation> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, myAccessRequestInformation struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTransaction_ID()) {
        optionals.set(0);
      }
      if (struct.isSetAccesses()) {
        optionals.set(1);
      }
      if (struct.isSetAccess_Reasons()) {
        optionals.set(2);
      }
      if (struct.isSetAccess_Mask()) {
        optionals.set(3);
      }
      if (struct.isSetPrivileges_Used_For_Access_Check()) {
        optionals.set(4);
      }
      if (struct.isSetRestricted_SID_Count()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetTransaction_ID()) {
        oprot.writeString(struct.Transaction_ID);
      }
      if (struct.isSetAccesses()) {
        oprot.writeString(struct.Accesses);
      }
      if (struct.isSetAccess_Reasons()) {
        oprot.writeString(struct.Access_Reasons);
      }
      if (struct.isSetAccess_Mask()) {
        oprot.writeString(struct.Access_Mask);
      }
      if (struct.isSetPrivileges_Used_For_Access_Check()) {
        oprot.writeString(struct.Privileges_Used_For_Access_Check);
      }
      if (struct.isSetRestricted_SID_Count()) {
        oprot.writeString(struct.Restricted_SID_Count);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, myAccessRequestInformation struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.Transaction_ID = iprot.readString();
        struct.setTransaction_IDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.Accesses = iprot.readString();
        struct.setAccessesIsSet(true);
      }
      if (incoming.get(2)) {
        struct.Access_Reasons = iprot.readString();
        struct.setAccess_ReasonsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.Access_Mask = iprot.readString();
        struct.setAccess_MaskIsSet(true);
      }
      if (incoming.get(4)) {
        struct.Privileges_Used_For_Access_Check = iprot.readString();
        struct.setPrivileges_Used_For_Access_CheckIsSet(true);
      }
      if (incoming.get(5)) {
        struct.Restricted_SID_Count = iprot.readString();
        struct.setRestricted_SID_CountIsSet(true);
      }
    }
  }

}

