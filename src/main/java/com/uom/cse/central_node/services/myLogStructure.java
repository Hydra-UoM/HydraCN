package com.uom.cse.central_node.services;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-12-30")
public class myLogStructure implements org.apache.thrift.TBase<myLogStructure, myLogStructure._Fields>, java.io.Serializable, Cloneable, Comparable<myLogStructure> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("myLogStructure");

  private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LEVEL_MESSAGE_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("levelMessageString", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TASK_MESSAGE_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("taskMessageString", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField OP_CODE_MESSAGE_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("opCodeMessageString", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CHANNEL_MESSAGE_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("channelMessageString", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PROVIDER_MESSAGE_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("providerMessageString", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField KEYWORDS_FIELD_DESC = new org.apache.thrift.protocol.TField("keywords", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField EXECUTION_PROCESS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("executionProcessID", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField EXECUTION_THREAD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("executionThreadID", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField COMPUTER_FIELD_DESC = new org.apache.thrift.protocol.TField("computer", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField EVENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("EventID", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField MY_SUBJECT1_FIELD_DESC = new org.apache.thrift.protocol.TField("mySubject1", org.apache.thrift.protocol.TType.STRUCT, (short)12);
  private static final org.apache.thrift.protocol.TField MY_PROVIDER_INFORMATION1_FIELD_DESC = new org.apache.thrift.protocol.TField("myProviderInformation1", org.apache.thrift.protocol.TType.STRUCT, (short)13);
  private static final org.apache.thrift.protocol.TField MY_OBJECT1_FIELD_DESC = new org.apache.thrift.protocol.TField("myObject1", org.apache.thrift.protocol.TType.STRUCT, (short)14);
  private static final org.apache.thrift.protocol.TField MY_NETWORK_INFORMATION1_FIELD_DESC = new org.apache.thrift.protocol.TField("myNetworkInformation1", org.apache.thrift.protocol.TType.STRUCT, (short)15);
  private static final org.apache.thrift.protocol.TField MY_LAYER_INFORMATION1_FIELD_DESC = new org.apache.thrift.protocol.TField("myLayerInformation1", org.apache.thrift.protocol.TType.STRUCT, (short)16);
  private static final org.apache.thrift.protocol.TField MY_FILTER_INFORMATION1_FIELD_DESC = new org.apache.thrift.protocol.TField("myFilterInformation1", org.apache.thrift.protocol.TType.STRUCT, (short)17);
  private static final org.apache.thrift.protocol.TField MY_CHANGE_INFORMATION1_FIELD_DESC = new org.apache.thrift.protocol.TField("myChangeInformation1", org.apache.thrift.protocol.TType.STRUCT, (short)18);
  private static final org.apache.thrift.protocol.TField MY_CALLOUT_INFORMATION1_FIELD_DESC = new org.apache.thrift.protocol.TField("myCalloutInformation1", org.apache.thrift.protocol.TType.STRUCT, (short)19);
  private static final org.apache.thrift.protocol.TField MY_APPLICATION_INFORMATION1_FIELD_DESC = new org.apache.thrift.protocol.TField("myApplicationInformation1", org.apache.thrift.protocol.TType.STRUCT, (short)20);
  private static final org.apache.thrift.protocol.TField MY_ACCESS_REQUEST_INFORMATION1_FIELD_DESC = new org.apache.thrift.protocol.TField("myAccessRequestInformation1", org.apache.thrift.protocol.TType.STRUCT, (short)21);
  private static final org.apache.thrift.protocol.TField MY_RULE_INFORMATION1_FIELD_DESC = new org.apache.thrift.protocol.TField("myRuleInformation1", org.apache.thrift.protocol.TType.STRUCT, (short)22);
  private static final org.apache.thrift.protocol.TField MY_ERROR_INFORMATION1_FIELD_DESC = new org.apache.thrift.protocol.TField("myErrorInformation1", org.apache.thrift.protocol.TType.STRUCT, (short)23);
  private static final org.apache.thrift.protocol.TField MY_PROCESS_INFORMATION1_FIELD_DESC = new org.apache.thrift.protocol.TField("myProcessInformation1", org.apache.thrift.protocol.TType.STRUCT, (short)24);
  private static final org.apache.thrift.protocol.TField MY_LOGON_TYPE1_FIELD_DESC = new org.apache.thrift.protocol.TField("myLogonType1", org.apache.thrift.protocol.TType.STRUCT, (short)25);
  private static final org.apache.thrift.protocol.TField MY_IMPERSONATION_LEVEL1_FIELD_DESC = new org.apache.thrift.protocol.TField("myImpersonationLevel1", org.apache.thrift.protocol.TType.STRUCT, (short)26);
  private static final org.apache.thrift.protocol.TField MY_ACCOUNT_FOR_WHICH_LOGON_FAILED1_FIELD_DESC = new org.apache.thrift.protocol.TField("myAccountForWhichLogonFailed1", org.apache.thrift.protocol.TType.STRUCT, (short)27);
  private static final org.apache.thrift.protocol.TField MY_FAILURE_INFORMATION1_FIELD_DESC = new org.apache.thrift.protocol.TField("myFailureInformation1", org.apache.thrift.protocol.TType.STRUCT, (short)28);
  private static final org.apache.thrift.protocol.TField MY_NEW_LOGON1_FIELD_DESC = new org.apache.thrift.protocol.TField("myNewLogon1", org.apache.thrift.protocol.TType.STRUCT, (short)29);
  private static final org.apache.thrift.protocol.TField MY_DETAILED_AUTHENTICATION_INFORMATION1_FIELD_DESC = new org.apache.thrift.protocol.TField("myDetailedAuthenticationInformation1", org.apache.thrift.protocol.TType.STRUCT, (short)30);
  private static final org.apache.thrift.protocol.TField MY_TIME_STAMP1_FIELD_DESC = new org.apache.thrift.protocol.TField("myTimeStamp1", org.apache.thrift.protocol.TType.STRUCT, (short)31);
  private static final org.apache.thrift.protocol.TField MAC_FIELD_DESC = new org.apache.thrift.protocol.TField("mac", org.apache.thrift.protocol.TType.STRING, (short)32);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new myLogStructureStandardSchemeFactory());
    schemes.put(TupleScheme.class, new myLogStructureTupleSchemeFactory());
  }

  public String message; // required
  public String levelMessageString; // required
  public String taskMessageString; // required
  public String opCodeMessageString; // required
  public String channelMessageString; // required
  public String providerMessageString; // required
  public String keywords; // required
  public String executionProcessID; // required
  public String executionThreadID; // required
  public String computer; // required
  public String EventID; // required
  public mySubject mySubject1; // required
  public myProviderInformation myProviderInformation1; // required
  public myObject myObject1; // required
  public myNetworkInformation myNetworkInformation1; // required
  public myLayerInformation myLayerInformation1; // required
  public myFilterInformation myFilterInformation1; // required
  public myChangeInformation myChangeInformation1; // required
  public myCalloutInformation myCalloutInformation1; // required
  public myApplicationInformation myApplicationInformation1; // required
  public myAccessRequestInformation myAccessRequestInformation1; // required
  public myRuleInformation myRuleInformation1; // required
  public myErrorInformation myErrorInformation1; // required
  public myProcessInformation myProcessInformation1; // required
  public myLogonType myLogonType1; // required
  public myImpersonationLevel myImpersonationLevel1; // required
  public myAccountForWhichLogonFailed myAccountForWhichLogonFailed1; // required
  public myFailureInformation myFailureInformation1; // required
  public myNewLogon myNewLogon1; // required
  public myDetailedAuthenticationInformation myDetailedAuthenticationInformation1; // required
  public myTimeStamp myTimeStamp1; // required
  public String mac; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MESSAGE((short)1, "message"),
    LEVEL_MESSAGE_STRING((short)2, "levelMessageString"),
    TASK_MESSAGE_STRING((short)3, "taskMessageString"),
    OP_CODE_MESSAGE_STRING((short)4, "opCodeMessageString"),
    CHANNEL_MESSAGE_STRING((short)5, "channelMessageString"),
    PROVIDER_MESSAGE_STRING((short)6, "providerMessageString"),
    KEYWORDS((short)7, "keywords"),
    EXECUTION_PROCESS_ID((short)8, "executionProcessID"),
    EXECUTION_THREAD_ID((short)9, "executionThreadID"),
    COMPUTER((short)10, "computer"),
    EVENT_ID((short)11, "EventID"),
    MY_SUBJECT1((short)12, "mySubject1"),
    MY_PROVIDER_INFORMATION1((short)13, "myProviderInformation1"),
    MY_OBJECT1((short)14, "myObject1"),
    MY_NETWORK_INFORMATION1((short)15, "myNetworkInformation1"),
    MY_LAYER_INFORMATION1((short)16, "myLayerInformation1"),
    MY_FILTER_INFORMATION1((short)17, "myFilterInformation1"),
    MY_CHANGE_INFORMATION1((short)18, "myChangeInformation1"),
    MY_CALLOUT_INFORMATION1((short)19, "myCalloutInformation1"),
    MY_APPLICATION_INFORMATION1((short)20, "myApplicationInformation1"),
    MY_ACCESS_REQUEST_INFORMATION1((short)21, "myAccessRequestInformation1"),
    MY_RULE_INFORMATION1((short)22, "myRuleInformation1"),
    MY_ERROR_INFORMATION1((short)23, "myErrorInformation1"),
    MY_PROCESS_INFORMATION1((short)24, "myProcessInformation1"),
    MY_LOGON_TYPE1((short)25, "myLogonType1"),
    MY_IMPERSONATION_LEVEL1((short)26, "myImpersonationLevel1"),
    MY_ACCOUNT_FOR_WHICH_LOGON_FAILED1((short)27, "myAccountForWhichLogonFailed1"),
    MY_FAILURE_INFORMATION1((short)28, "myFailureInformation1"),
    MY_NEW_LOGON1((short)29, "myNewLogon1"),
    MY_DETAILED_AUTHENTICATION_INFORMATION1((short)30, "myDetailedAuthenticationInformation1"),
    MY_TIME_STAMP1((short)31, "myTimeStamp1"),
    MAC((short)32, "mac");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MESSAGE
          return MESSAGE;
        case 2: // LEVEL_MESSAGE_STRING
          return LEVEL_MESSAGE_STRING;
        case 3: // TASK_MESSAGE_STRING
          return TASK_MESSAGE_STRING;
        case 4: // OP_CODE_MESSAGE_STRING
          return OP_CODE_MESSAGE_STRING;
        case 5: // CHANNEL_MESSAGE_STRING
          return CHANNEL_MESSAGE_STRING;
        case 6: // PROVIDER_MESSAGE_STRING
          return PROVIDER_MESSAGE_STRING;
        case 7: // KEYWORDS
          return KEYWORDS;
        case 8: // EXECUTION_PROCESS_ID
          return EXECUTION_PROCESS_ID;
        case 9: // EXECUTION_THREAD_ID
          return EXECUTION_THREAD_ID;
        case 10: // COMPUTER
          return COMPUTER;
        case 11: // EVENT_ID
          return EVENT_ID;
        case 12: // MY_SUBJECT1
          return MY_SUBJECT1;
        case 13: // MY_PROVIDER_INFORMATION1
          return MY_PROVIDER_INFORMATION1;
        case 14: // MY_OBJECT1
          return MY_OBJECT1;
        case 15: // MY_NETWORK_INFORMATION1
          return MY_NETWORK_INFORMATION1;
        case 16: // MY_LAYER_INFORMATION1
          return MY_LAYER_INFORMATION1;
        case 17: // MY_FILTER_INFORMATION1
          return MY_FILTER_INFORMATION1;
        case 18: // MY_CHANGE_INFORMATION1
          return MY_CHANGE_INFORMATION1;
        case 19: // MY_CALLOUT_INFORMATION1
          return MY_CALLOUT_INFORMATION1;
        case 20: // MY_APPLICATION_INFORMATION1
          return MY_APPLICATION_INFORMATION1;
        case 21: // MY_ACCESS_REQUEST_INFORMATION1
          return MY_ACCESS_REQUEST_INFORMATION1;
        case 22: // MY_RULE_INFORMATION1
          return MY_RULE_INFORMATION1;
        case 23: // MY_ERROR_INFORMATION1
          return MY_ERROR_INFORMATION1;
        case 24: // MY_PROCESS_INFORMATION1
          return MY_PROCESS_INFORMATION1;
        case 25: // MY_LOGON_TYPE1
          return MY_LOGON_TYPE1;
        case 26: // MY_IMPERSONATION_LEVEL1
          return MY_IMPERSONATION_LEVEL1;
        case 27: // MY_ACCOUNT_FOR_WHICH_LOGON_FAILED1
          return MY_ACCOUNT_FOR_WHICH_LOGON_FAILED1;
        case 28: // MY_FAILURE_INFORMATION1
          return MY_FAILURE_INFORMATION1;
        case 29: // MY_NEW_LOGON1
          return MY_NEW_LOGON1;
        case 30: // MY_DETAILED_AUTHENTICATION_INFORMATION1
          return MY_DETAILED_AUTHENTICATION_INFORMATION1;
        case 31: // MY_TIME_STAMP1
          return MY_TIME_STAMP1;
        case 32: // MAC
          return MAC;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LEVEL_MESSAGE_STRING, new org.apache.thrift.meta_data.FieldMetaData("levelMessageString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TASK_MESSAGE_STRING, new org.apache.thrift.meta_data.FieldMetaData("taskMessageString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OP_CODE_MESSAGE_STRING, new org.apache.thrift.meta_data.FieldMetaData("opCodeMessageString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHANNEL_MESSAGE_STRING, new org.apache.thrift.meta_data.FieldMetaData("channelMessageString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROVIDER_MESSAGE_STRING, new org.apache.thrift.meta_data.FieldMetaData("providerMessageString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KEYWORDS, new org.apache.thrift.meta_data.FieldMetaData("keywords", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXECUTION_PROCESS_ID, new org.apache.thrift.meta_data.FieldMetaData("executionProcessID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXECUTION_THREAD_ID, new org.apache.thrift.meta_data.FieldMetaData("executionThreadID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPUTER, new org.apache.thrift.meta_data.FieldMetaData("computer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EVENT_ID, new org.apache.thrift.meta_data.FieldMetaData("EventID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MY_SUBJECT1, new org.apache.thrift.meta_data.FieldMetaData("mySubject1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, mySubject.class)));
    tmpMap.put(_Fields.MY_PROVIDER_INFORMATION1, new org.apache.thrift.meta_data.FieldMetaData("myProviderInformation1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, myProviderInformation.class)));
    tmpMap.put(_Fields.MY_OBJECT1, new org.apache.thrift.meta_data.FieldMetaData("myObject1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, myObject.class)));
    tmpMap.put(_Fields.MY_NETWORK_INFORMATION1, new org.apache.thrift.meta_data.FieldMetaData("myNetworkInformation1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, myNetworkInformation.class)));
    tmpMap.put(_Fields.MY_LAYER_INFORMATION1, new org.apache.thrift.meta_data.FieldMetaData("myLayerInformation1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, myLayerInformation.class)));
    tmpMap.put(_Fields.MY_FILTER_INFORMATION1, new org.apache.thrift.meta_data.FieldMetaData("myFilterInformation1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, myFilterInformation.class)));
    tmpMap.put(_Fields.MY_CHANGE_INFORMATION1, new org.apache.thrift.meta_data.FieldMetaData("myChangeInformation1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, myChangeInformation.class)));
    tmpMap.put(_Fields.MY_CALLOUT_INFORMATION1, new org.apache.thrift.meta_data.FieldMetaData("myCalloutInformation1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, myCalloutInformation.class)));
    tmpMap.put(_Fields.MY_APPLICATION_INFORMATION1, new org.apache.thrift.meta_data.FieldMetaData("myApplicationInformation1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, myApplicationInformation.class)));
    tmpMap.put(_Fields.MY_ACCESS_REQUEST_INFORMATION1, new org.apache.thrift.meta_data.FieldMetaData("myAccessRequestInformation1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, myAccessRequestInformation.class)));
    tmpMap.put(_Fields.MY_RULE_INFORMATION1, new org.apache.thrift.meta_data.FieldMetaData("myRuleInformation1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, myRuleInformation.class)));
    tmpMap.put(_Fields.MY_ERROR_INFORMATION1, new org.apache.thrift.meta_data.FieldMetaData("myErrorInformation1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, myErrorInformation.class)));
    tmpMap.put(_Fields.MY_PROCESS_INFORMATION1, new org.apache.thrift.meta_data.FieldMetaData("myProcessInformation1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, myProcessInformation.class)));
    tmpMap.put(_Fields.MY_LOGON_TYPE1, new org.apache.thrift.meta_data.FieldMetaData("myLogonType1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, myLogonType.class)));
    tmpMap.put(_Fields.MY_IMPERSONATION_LEVEL1, new org.apache.thrift.meta_data.FieldMetaData("myImpersonationLevel1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, myImpersonationLevel.class)));
    tmpMap.put(_Fields.MY_ACCOUNT_FOR_WHICH_LOGON_FAILED1, new org.apache.thrift.meta_data.FieldMetaData("myAccountForWhichLogonFailed1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, myAccountForWhichLogonFailed.class)));
    tmpMap.put(_Fields.MY_FAILURE_INFORMATION1, new org.apache.thrift.meta_data.FieldMetaData("myFailureInformation1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, myFailureInformation.class)));
    tmpMap.put(_Fields.MY_NEW_LOGON1, new org.apache.thrift.meta_data.FieldMetaData("myNewLogon1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, myNewLogon.class)));
    tmpMap.put(_Fields.MY_DETAILED_AUTHENTICATION_INFORMATION1, new org.apache.thrift.meta_data.FieldMetaData("myDetailedAuthenticationInformation1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, myDetailedAuthenticationInformation.class)));
    tmpMap.put(_Fields.MY_TIME_STAMP1, new org.apache.thrift.meta_data.FieldMetaData("myTimeStamp1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, myTimeStamp.class)));
    tmpMap.put(_Fields.MAC, new org.apache.thrift.meta_data.FieldMetaData("mac", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(myLogStructure.class, metaDataMap);
  }

  public myLogStructure() {
  }

  public myLogStructure(
    String message,
    String levelMessageString,
    String taskMessageString,
    String opCodeMessageString,
    String channelMessageString,
    String providerMessageString,
    String keywords,
    String executionProcessID,
    String executionThreadID,
    String computer,
    String EventID,
    mySubject mySubject1,
    myProviderInformation myProviderInformation1,
    myObject myObject1,
    myNetworkInformation myNetworkInformation1,
    myLayerInformation myLayerInformation1,
    myFilterInformation myFilterInformation1,
    myChangeInformation myChangeInformation1,
    myCalloutInformation myCalloutInformation1,
    myApplicationInformation myApplicationInformation1,
    myAccessRequestInformation myAccessRequestInformation1,
    myRuleInformation myRuleInformation1,
    myErrorInformation myErrorInformation1,
    myProcessInformation myProcessInformation1,
    myLogonType myLogonType1,
    myImpersonationLevel myImpersonationLevel1,
    myAccountForWhichLogonFailed myAccountForWhichLogonFailed1,
    myFailureInformation myFailureInformation1,
    myNewLogon myNewLogon1,
    myDetailedAuthenticationInformation myDetailedAuthenticationInformation1,
    myTimeStamp myTimeStamp1,
    String mac)
  {
    this();
    this.message = message;
    this.levelMessageString = levelMessageString;
    this.taskMessageString = taskMessageString;
    this.opCodeMessageString = opCodeMessageString;
    this.channelMessageString = channelMessageString;
    this.providerMessageString = providerMessageString;
    this.keywords = keywords;
    this.executionProcessID = executionProcessID;
    this.executionThreadID = executionThreadID;
    this.computer = computer;
    this.EventID = EventID;
    this.mySubject1 = mySubject1;
    this.myProviderInformation1 = myProviderInformation1;
    this.myObject1 = myObject1;
    this.myNetworkInformation1 = myNetworkInformation1;
    this.myLayerInformation1 = myLayerInformation1;
    this.myFilterInformation1 = myFilterInformation1;
    this.myChangeInformation1 = myChangeInformation1;
    this.myCalloutInformation1 = myCalloutInformation1;
    this.myApplicationInformation1 = myApplicationInformation1;
    this.myAccessRequestInformation1 = myAccessRequestInformation1;
    this.myRuleInformation1 = myRuleInformation1;
    this.myErrorInformation1 = myErrorInformation1;
    this.myProcessInformation1 = myProcessInformation1;
    this.myLogonType1 = myLogonType1;
    this.myImpersonationLevel1 = myImpersonationLevel1;
    this.myAccountForWhichLogonFailed1 = myAccountForWhichLogonFailed1;
    this.myFailureInformation1 = myFailureInformation1;
    this.myNewLogon1 = myNewLogon1;
    this.myDetailedAuthenticationInformation1 = myDetailedAuthenticationInformation1;
    this.myTimeStamp1 = myTimeStamp1;
    this.mac = mac;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public myLogStructure(myLogStructure other) {
    if (other.isSetMessage()) {
      this.message = other.message;
    }
    if (other.isSetLevelMessageString()) {
      this.levelMessageString = other.levelMessageString;
    }
    if (other.isSetTaskMessageString()) {
      this.taskMessageString = other.taskMessageString;
    }
    if (other.isSetOpCodeMessageString()) {
      this.opCodeMessageString = other.opCodeMessageString;
    }
    if (other.isSetChannelMessageString()) {
      this.channelMessageString = other.channelMessageString;
    }
    if (other.isSetProviderMessageString()) {
      this.providerMessageString = other.providerMessageString;
    }
    if (other.isSetKeywords()) {
      this.keywords = other.keywords;
    }
    if (other.isSetExecutionProcessID()) {
      this.executionProcessID = other.executionProcessID;
    }
    if (other.isSetExecutionThreadID()) {
      this.executionThreadID = other.executionThreadID;
    }
    if (other.isSetComputer()) {
      this.computer = other.computer;
    }
    if (other.isSetEventID()) {
      this.EventID = other.EventID;
    }
    if (other.isSetMySubject1()) {
      this.mySubject1 = new mySubject(other.mySubject1);
    }
    if (other.isSetMyProviderInformation1()) {
      this.myProviderInformation1 = new myProviderInformation(other.myProviderInformation1);
    }
    if (other.isSetMyObject1()) {
      this.myObject1 = new myObject(other.myObject1);
    }
    if (other.isSetMyNetworkInformation1()) {
      this.myNetworkInformation1 = new myNetworkInformation(other.myNetworkInformation1);
    }
    if (other.isSetMyLayerInformation1()) {
      this.myLayerInformation1 = new myLayerInformation(other.myLayerInformation1);
    }
    if (other.isSetMyFilterInformation1()) {
      this.myFilterInformation1 = new myFilterInformation(other.myFilterInformation1);
    }
    if (other.isSetMyChangeInformation1()) {
      this.myChangeInformation1 = new myChangeInformation(other.myChangeInformation1);
    }
    if (other.isSetMyCalloutInformation1()) {
      this.myCalloutInformation1 = new myCalloutInformation(other.myCalloutInformation1);
    }
    if (other.isSetMyApplicationInformation1()) {
      this.myApplicationInformation1 = new myApplicationInformation(other.myApplicationInformation1);
    }
    if (other.isSetMyAccessRequestInformation1()) {
      this.myAccessRequestInformation1 = new myAccessRequestInformation(other.myAccessRequestInformation1);
    }
    if (other.isSetMyRuleInformation1()) {
      this.myRuleInformation1 = new myRuleInformation(other.myRuleInformation1);
    }
    if (other.isSetMyErrorInformation1()) {
      this.myErrorInformation1 = new myErrorInformation(other.myErrorInformation1);
    }
    if (other.isSetMyProcessInformation1()) {
      this.myProcessInformation1 = new myProcessInformation(other.myProcessInformation1);
    }
    if (other.isSetMyLogonType1()) {
      this.myLogonType1 = new myLogonType(other.myLogonType1);
    }
    if (other.isSetMyImpersonationLevel1()) {
      this.myImpersonationLevel1 = new myImpersonationLevel(other.myImpersonationLevel1);
    }
    if (other.isSetMyAccountForWhichLogonFailed1()) {
      this.myAccountForWhichLogonFailed1 = new myAccountForWhichLogonFailed(other.myAccountForWhichLogonFailed1);
    }
    if (other.isSetMyFailureInformation1()) {
      this.myFailureInformation1 = new myFailureInformation(other.myFailureInformation1);
    }
    if (other.isSetMyNewLogon1()) {
      this.myNewLogon1 = new myNewLogon(other.myNewLogon1);
    }
    if (other.isSetMyDetailedAuthenticationInformation1()) {
      this.myDetailedAuthenticationInformation1 = new myDetailedAuthenticationInformation(other.myDetailedAuthenticationInformation1);
    }
    if (other.isSetMyTimeStamp1()) {
      this.myTimeStamp1 = new myTimeStamp(other.myTimeStamp1);
    }
    if (other.isSetMac()) {
      this.mac = other.mac;
    }
  }

  public myLogStructure deepCopy() {
    return new myLogStructure(this);
  }

  @Override
  public void clear() {
    this.message = null;
    this.levelMessageString = null;
    this.taskMessageString = null;
    this.opCodeMessageString = null;
    this.channelMessageString = null;
    this.providerMessageString = null;
    this.keywords = null;
    this.executionProcessID = null;
    this.executionThreadID = null;
    this.computer = null;
    this.EventID = null;
    this.mySubject1 = null;
    this.myProviderInformation1 = null;
    this.myObject1 = null;
    this.myNetworkInformation1 = null;
    this.myLayerInformation1 = null;
    this.myFilterInformation1 = null;
    this.myChangeInformation1 = null;
    this.myCalloutInformation1 = null;
    this.myApplicationInformation1 = null;
    this.myAccessRequestInformation1 = null;
    this.myRuleInformation1 = null;
    this.myErrorInformation1 = null;
    this.myProcessInformation1 = null;
    this.myLogonType1 = null;
    this.myImpersonationLevel1 = null;
    this.myAccountForWhichLogonFailed1 = null;
    this.myFailureInformation1 = null;
    this.myNewLogon1 = null;
    this.myDetailedAuthenticationInformation1 = null;
    this.myTimeStamp1 = null;
    this.mac = null;
  }

  public String getMessage() {
    return this.message;
  }

  public myLogStructure setMessage(String message) {
    this.message = message;
    return this;
  }

  public void unsetMessage() {
    this.message = null;
  }

  /** Returns true if field message is set (has been assigned a value) and false otherwise */
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  public String getLevelMessageString() {
    return this.levelMessageString;
  }

  public myLogStructure setLevelMessageString(String levelMessageString) {
    this.levelMessageString = levelMessageString;
    return this;
  }

  public void unsetLevelMessageString() {
    this.levelMessageString = null;
  }

  /** Returns true if field levelMessageString is set (has been assigned a value) and false otherwise */
  public boolean isSetLevelMessageString() {
    return this.levelMessageString != null;
  }

  public void setLevelMessageStringIsSet(boolean value) {
    if (!value) {
      this.levelMessageString = null;
    }
  }

  public String getTaskMessageString() {
    return this.taskMessageString;
  }

  public myLogStructure setTaskMessageString(String taskMessageString) {
    this.taskMessageString = taskMessageString;
    return this;
  }

  public void unsetTaskMessageString() {
    this.taskMessageString = null;
  }

  /** Returns true if field taskMessageString is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskMessageString() {
    return this.taskMessageString != null;
  }

  public void setTaskMessageStringIsSet(boolean value) {
    if (!value) {
      this.taskMessageString = null;
    }
  }

  public String getOpCodeMessageString() {
    return this.opCodeMessageString;
  }

  public myLogStructure setOpCodeMessageString(String opCodeMessageString) {
    this.opCodeMessageString = opCodeMessageString;
    return this;
  }

  public void unsetOpCodeMessageString() {
    this.opCodeMessageString = null;
  }

  /** Returns true if field opCodeMessageString is set (has been assigned a value) and false otherwise */
  public boolean isSetOpCodeMessageString() {
    return this.opCodeMessageString != null;
  }

  public void setOpCodeMessageStringIsSet(boolean value) {
    if (!value) {
      this.opCodeMessageString = null;
    }
  }

  public String getChannelMessageString() {
    return this.channelMessageString;
  }

  public myLogStructure setChannelMessageString(String channelMessageString) {
    this.channelMessageString = channelMessageString;
    return this;
  }

  public void unsetChannelMessageString() {
    this.channelMessageString = null;
  }

  /** Returns true if field channelMessageString is set (has been assigned a value) and false otherwise */
  public boolean isSetChannelMessageString() {
    return this.channelMessageString != null;
  }

  public void setChannelMessageStringIsSet(boolean value) {
    if (!value) {
      this.channelMessageString = null;
    }
  }

  public String getProviderMessageString() {
    return this.providerMessageString;
  }

  public myLogStructure setProviderMessageString(String providerMessageString) {
    this.providerMessageString = providerMessageString;
    return this;
  }

  public void unsetProviderMessageString() {
    this.providerMessageString = null;
  }

  /** Returns true if field providerMessageString is set (has been assigned a value) and false otherwise */
  public boolean isSetProviderMessageString() {
    return this.providerMessageString != null;
  }

  public void setProviderMessageStringIsSet(boolean value) {
    if (!value) {
      this.providerMessageString = null;
    }
  }

  public String getKeywords() {
    return this.keywords;
  }

  public myLogStructure setKeywords(String keywords) {
    this.keywords = keywords;
    return this;
  }

  public void unsetKeywords() {
    this.keywords = null;
  }

  /** Returns true if field keywords is set (has been assigned a value) and false otherwise */
  public boolean isSetKeywords() {
    return this.keywords != null;
  }

  public void setKeywordsIsSet(boolean value) {
    if (!value) {
      this.keywords = null;
    }
  }

  public String getExecutionProcessID() {
    return this.executionProcessID;
  }

  public myLogStructure setExecutionProcessID(String executionProcessID) {
    this.executionProcessID = executionProcessID;
    return this;
  }

  public void unsetExecutionProcessID() {
    this.executionProcessID = null;
  }

  /** Returns true if field executionProcessID is set (has been assigned a value) and false otherwise */
  public boolean isSetExecutionProcessID() {
    return this.executionProcessID != null;
  }

  public void setExecutionProcessIDIsSet(boolean value) {
    if (!value) {
      this.executionProcessID = null;
    }
  }

  public String getExecutionThreadID() {
    return this.executionThreadID;
  }

  public myLogStructure setExecutionThreadID(String executionThreadID) {
    this.executionThreadID = executionThreadID;
    return this;
  }

  public void unsetExecutionThreadID() {
    this.executionThreadID = null;
  }

  /** Returns true if field executionThreadID is set (has been assigned a value) and false otherwise */
  public boolean isSetExecutionThreadID() {
    return this.executionThreadID != null;
  }

  public void setExecutionThreadIDIsSet(boolean value) {
    if (!value) {
      this.executionThreadID = null;
    }
  }

  public String getComputer() {
    return this.computer;
  }

  public myLogStructure setComputer(String computer) {
    this.computer = computer;
    return this;
  }

  public void unsetComputer() {
    this.computer = null;
  }

  /** Returns true if field computer is set (has been assigned a value) and false otherwise */
  public boolean isSetComputer() {
    return this.computer != null;
  }

  public void setComputerIsSet(boolean value) {
    if (!value) {
      this.computer = null;
    }
  }

  public String getEventID() {
    return this.EventID;
  }

  public myLogStructure setEventID(String EventID) {
    this.EventID = EventID;
    return this;
  }

  public void unsetEventID() {
    this.EventID = null;
  }

  /** Returns true if field EventID is set (has been assigned a value) and false otherwise */
  public boolean isSetEventID() {
    return this.EventID != null;
  }

  public void setEventIDIsSet(boolean value) {
    if (!value) {
      this.EventID = null;
    }
  }

  public mySubject getMySubject1() {
    return this.mySubject1;
  }

  public myLogStructure setMySubject1(mySubject mySubject1) {
    this.mySubject1 = mySubject1;
    return this;
  }

  public void unsetMySubject1() {
    this.mySubject1 = null;
  }

  /** Returns true if field mySubject1 is set (has been assigned a value) and false otherwise */
  public boolean isSetMySubject1() {
    return this.mySubject1 != null;
  }

  public void setMySubject1IsSet(boolean value) {
    if (!value) {
      this.mySubject1 = null;
    }
  }

  public myProviderInformation getMyProviderInformation1() {
    return this.myProviderInformation1;
  }

  public myLogStructure setMyProviderInformation1(myProviderInformation myProviderInformation1) {
    this.myProviderInformation1 = myProviderInformation1;
    return this;
  }

  public void unsetMyProviderInformation1() {
    this.myProviderInformation1 = null;
  }

  /** Returns true if field myProviderInformation1 is set (has been assigned a value) and false otherwise */
  public boolean isSetMyProviderInformation1() {
    return this.myProviderInformation1 != null;
  }

  public void setMyProviderInformation1IsSet(boolean value) {
    if (!value) {
      this.myProviderInformation1 = null;
    }
  }

  public myObject getMyObject1() {
    return this.myObject1;
  }

  public myLogStructure setMyObject1(myObject myObject1) {
    this.myObject1 = myObject1;
    return this;
  }

  public void unsetMyObject1() {
    this.myObject1 = null;
  }

  /** Returns true if field myObject1 is set (has been assigned a value) and false otherwise */
  public boolean isSetMyObject1() {
    return this.myObject1 != null;
  }

  public void setMyObject1IsSet(boolean value) {
    if (!value) {
      this.myObject1 = null;
    }
  }

  public myNetworkInformation getMyNetworkInformation1() {
    return this.myNetworkInformation1;
  }

  public myLogStructure setMyNetworkInformation1(myNetworkInformation myNetworkInformation1) {
    this.myNetworkInformation1 = myNetworkInformation1;
    return this;
  }

  public void unsetMyNetworkInformation1() {
    this.myNetworkInformation1 = null;
  }

  /** Returns true if field myNetworkInformation1 is set (has been assigned a value) and false otherwise */
  public boolean isSetMyNetworkInformation1() {
    return this.myNetworkInformation1 != null;
  }

  public void setMyNetworkInformation1IsSet(boolean value) {
    if (!value) {
      this.myNetworkInformation1 = null;
    }
  }

  public myLayerInformation getMyLayerInformation1() {
    return this.myLayerInformation1;
  }

  public myLogStructure setMyLayerInformation1(myLayerInformation myLayerInformation1) {
    this.myLayerInformation1 = myLayerInformation1;
    return this;
  }

  public void unsetMyLayerInformation1() {
    this.myLayerInformation1 = null;
  }

  /** Returns true if field myLayerInformation1 is set (has been assigned a value) and false otherwise */
  public boolean isSetMyLayerInformation1() {
    return this.myLayerInformation1 != null;
  }

  public void setMyLayerInformation1IsSet(boolean value) {
    if (!value) {
      this.myLayerInformation1 = null;
    }
  }

  public myFilterInformation getMyFilterInformation1() {
    return this.myFilterInformation1;
  }

  public myLogStructure setMyFilterInformation1(myFilterInformation myFilterInformation1) {
    this.myFilterInformation1 = myFilterInformation1;
    return this;
  }

  public void unsetMyFilterInformation1() {
    this.myFilterInformation1 = null;
  }

  /** Returns true if field myFilterInformation1 is set (has been assigned a value) and false otherwise */
  public boolean isSetMyFilterInformation1() {
    return this.myFilterInformation1 != null;
  }

  public void setMyFilterInformation1IsSet(boolean value) {
    if (!value) {
      this.myFilterInformation1 = null;
    }
  }

  public myChangeInformation getMyChangeInformation1() {
    return this.myChangeInformation1;
  }

  public myLogStructure setMyChangeInformation1(myChangeInformation myChangeInformation1) {
    this.myChangeInformation1 = myChangeInformation1;
    return this;
  }

  public void unsetMyChangeInformation1() {
    this.myChangeInformation1 = null;
  }

  /** Returns true if field myChangeInformation1 is set (has been assigned a value) and false otherwise */
  public boolean isSetMyChangeInformation1() {
    return this.myChangeInformation1 != null;
  }

  public void setMyChangeInformation1IsSet(boolean value) {
    if (!value) {
      this.myChangeInformation1 = null;
    }
  }

  public myCalloutInformation getMyCalloutInformation1() {
    return this.myCalloutInformation1;
  }

  public myLogStructure setMyCalloutInformation1(myCalloutInformation myCalloutInformation1) {
    this.myCalloutInformation1 = myCalloutInformation1;
    return this;
  }

  public void unsetMyCalloutInformation1() {
    this.myCalloutInformation1 = null;
  }

  /** Returns true if field myCalloutInformation1 is set (has been assigned a value) and false otherwise */
  public boolean isSetMyCalloutInformation1() {
    return this.myCalloutInformation1 != null;
  }

  public void setMyCalloutInformation1IsSet(boolean value) {
    if (!value) {
      this.myCalloutInformation1 = null;
    }
  }

  public myApplicationInformation getMyApplicationInformation1() {
    return this.myApplicationInformation1;
  }

  public myLogStructure setMyApplicationInformation1(myApplicationInformation myApplicationInformation1) {
    this.myApplicationInformation1 = myApplicationInformation1;
    return this;
  }

  public void unsetMyApplicationInformation1() {
    this.myApplicationInformation1 = null;
  }

  /** Returns true if field myApplicationInformation1 is set (has been assigned a value) and false otherwise */
  public boolean isSetMyApplicationInformation1() {
    return this.myApplicationInformation1 != null;
  }

  public void setMyApplicationInformation1IsSet(boolean value) {
    if (!value) {
      this.myApplicationInformation1 = null;
    }
  }

  public myAccessRequestInformation getMyAccessRequestInformation1() {
    return this.myAccessRequestInformation1;
  }

  public myLogStructure setMyAccessRequestInformation1(myAccessRequestInformation myAccessRequestInformation1) {
    this.myAccessRequestInformation1 = myAccessRequestInformation1;
    return this;
  }

  public void unsetMyAccessRequestInformation1() {
    this.myAccessRequestInformation1 = null;
  }

  /** Returns true if field myAccessRequestInformation1 is set (has been assigned a value) and false otherwise */
  public boolean isSetMyAccessRequestInformation1() {
    return this.myAccessRequestInformation1 != null;
  }

  public void setMyAccessRequestInformation1IsSet(boolean value) {
    if (!value) {
      this.myAccessRequestInformation1 = null;
    }
  }

  public myRuleInformation getMyRuleInformation1() {
    return this.myRuleInformation1;
  }

  public myLogStructure setMyRuleInformation1(myRuleInformation myRuleInformation1) {
    this.myRuleInformation1 = myRuleInformation1;
    return this;
  }

  public void unsetMyRuleInformation1() {
    this.myRuleInformation1 = null;
  }

  /** Returns true if field myRuleInformation1 is set (has been assigned a value) and false otherwise */
  public boolean isSetMyRuleInformation1() {
    return this.myRuleInformation1 != null;
  }

  public void setMyRuleInformation1IsSet(boolean value) {
    if (!value) {
      this.myRuleInformation1 = null;
    }
  }

  public myErrorInformation getMyErrorInformation1() {
    return this.myErrorInformation1;
  }

  public myLogStructure setMyErrorInformation1(myErrorInformation myErrorInformation1) {
    this.myErrorInformation1 = myErrorInformation1;
    return this;
  }

  public void unsetMyErrorInformation1() {
    this.myErrorInformation1 = null;
  }

  /** Returns true if field myErrorInformation1 is set (has been assigned a value) and false otherwise */
  public boolean isSetMyErrorInformation1() {
    return this.myErrorInformation1 != null;
  }

  public void setMyErrorInformation1IsSet(boolean value) {
    if (!value) {
      this.myErrorInformation1 = null;
    }
  }

  public myProcessInformation getMyProcessInformation1() {
    return this.myProcessInformation1;
  }

  public myLogStructure setMyProcessInformation1(myProcessInformation myProcessInformation1) {
    this.myProcessInformation1 = myProcessInformation1;
    return this;
  }

  public void unsetMyProcessInformation1() {
    this.myProcessInformation1 = null;
  }

  /** Returns true if field myProcessInformation1 is set (has been assigned a value) and false otherwise */
  public boolean isSetMyProcessInformation1() {
    return this.myProcessInformation1 != null;
  }

  public void setMyProcessInformation1IsSet(boolean value) {
    if (!value) {
      this.myProcessInformation1 = null;
    }
  }

  public myLogonType getMyLogonType1() {
    return this.myLogonType1;
  }

  public myLogStructure setMyLogonType1(myLogonType myLogonType1) {
    this.myLogonType1 = myLogonType1;
    return this;
  }

  public void unsetMyLogonType1() {
    this.myLogonType1 = null;
  }

  /** Returns true if field myLogonType1 is set (has been assigned a value) and false otherwise */
  public boolean isSetMyLogonType1() {
    return this.myLogonType1 != null;
  }

  public void setMyLogonType1IsSet(boolean value) {
    if (!value) {
      this.myLogonType1 = null;
    }
  }

  public myImpersonationLevel getMyImpersonationLevel1() {
    return this.myImpersonationLevel1;
  }

  public myLogStructure setMyImpersonationLevel1(myImpersonationLevel myImpersonationLevel1) {
    this.myImpersonationLevel1 = myImpersonationLevel1;
    return this;
  }

  public void unsetMyImpersonationLevel1() {
    this.myImpersonationLevel1 = null;
  }

  /** Returns true if field myImpersonationLevel1 is set (has been assigned a value) and false otherwise */
  public boolean isSetMyImpersonationLevel1() {
    return this.myImpersonationLevel1 != null;
  }

  public void setMyImpersonationLevel1IsSet(boolean value) {
    if (!value) {
      this.myImpersonationLevel1 = null;
    }
  }

  public myAccountForWhichLogonFailed getMyAccountForWhichLogonFailed1() {
    return this.myAccountForWhichLogonFailed1;
  }

  public myLogStructure setMyAccountForWhichLogonFailed1(myAccountForWhichLogonFailed myAccountForWhichLogonFailed1) {
    this.myAccountForWhichLogonFailed1 = myAccountForWhichLogonFailed1;
    return this;
  }

  public void unsetMyAccountForWhichLogonFailed1() {
    this.myAccountForWhichLogonFailed1 = null;
  }

  /** Returns true if field myAccountForWhichLogonFailed1 is set (has been assigned a value) and false otherwise */
  public boolean isSetMyAccountForWhichLogonFailed1() {
    return this.myAccountForWhichLogonFailed1 != null;
  }

  public void setMyAccountForWhichLogonFailed1IsSet(boolean value) {
    if (!value) {
      this.myAccountForWhichLogonFailed1 = null;
    }
  }

  public myFailureInformation getMyFailureInformation1() {
    return this.myFailureInformation1;
  }

  public myLogStructure setMyFailureInformation1(myFailureInformation myFailureInformation1) {
    this.myFailureInformation1 = myFailureInformation1;
    return this;
  }

  public void unsetMyFailureInformation1() {
    this.myFailureInformation1 = null;
  }

  /** Returns true if field myFailureInformation1 is set (has been assigned a value) and false otherwise */
  public boolean isSetMyFailureInformation1() {
    return this.myFailureInformation1 != null;
  }

  public void setMyFailureInformation1IsSet(boolean value) {
    if (!value) {
      this.myFailureInformation1 = null;
    }
  }

  public myNewLogon getMyNewLogon1() {
    return this.myNewLogon1;
  }

  public myLogStructure setMyNewLogon1(myNewLogon myNewLogon1) {
    this.myNewLogon1 = myNewLogon1;
    return this;
  }

  public void unsetMyNewLogon1() {
    this.myNewLogon1 = null;
  }

  /** Returns true if field myNewLogon1 is set (has been assigned a value) and false otherwise */
  public boolean isSetMyNewLogon1() {
    return this.myNewLogon1 != null;
  }

  public void setMyNewLogon1IsSet(boolean value) {
    if (!value) {
      this.myNewLogon1 = null;
    }
  }

  public myDetailedAuthenticationInformation getMyDetailedAuthenticationInformation1() {
    return this.myDetailedAuthenticationInformation1;
  }

  public myLogStructure setMyDetailedAuthenticationInformation1(myDetailedAuthenticationInformation myDetailedAuthenticationInformation1) {
    this.myDetailedAuthenticationInformation1 = myDetailedAuthenticationInformation1;
    return this;
  }

  public void unsetMyDetailedAuthenticationInformation1() {
    this.myDetailedAuthenticationInformation1 = null;
  }

  /** Returns true if field myDetailedAuthenticationInformation1 is set (has been assigned a value) and false otherwise */
  public boolean isSetMyDetailedAuthenticationInformation1() {
    return this.myDetailedAuthenticationInformation1 != null;
  }

  public void setMyDetailedAuthenticationInformation1IsSet(boolean value) {
    if (!value) {
      this.myDetailedAuthenticationInformation1 = null;
    }
  }

  public myTimeStamp getMyTimeStamp1() {
    return this.myTimeStamp1;
  }

  public myLogStructure setMyTimeStamp1(myTimeStamp myTimeStamp1) {
    this.myTimeStamp1 = myTimeStamp1;
    return this;
  }

  public void unsetMyTimeStamp1() {
    this.myTimeStamp1 = null;
  }

  /** Returns true if field myTimeStamp1 is set (has been assigned a value) and false otherwise */
  public boolean isSetMyTimeStamp1() {
    return this.myTimeStamp1 != null;
  }

  public void setMyTimeStamp1IsSet(boolean value) {
    if (!value) {
      this.myTimeStamp1 = null;
    }
  }

  public String getMac() {
    return this.mac;
  }

  public myLogStructure setMac(String mac) {
    this.mac = mac;
    return this;
  }

  public void unsetMac() {
    this.mac = null;
  }

  /** Returns true if field mac is set (has been assigned a value) and false otherwise */
  public boolean isSetMac() {
    return this.mac != null;
  }

  public void setMacIsSet(boolean value) {
    if (!value) {
      this.mac = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((String)value);
      }
      break;

    case LEVEL_MESSAGE_STRING:
      if (value == null) {
        unsetLevelMessageString();
      } else {
        setLevelMessageString((String)value);
      }
      break;

    case TASK_MESSAGE_STRING:
      if (value == null) {
        unsetTaskMessageString();
      } else {
        setTaskMessageString((String)value);
      }
      break;

    case OP_CODE_MESSAGE_STRING:
      if (value == null) {
        unsetOpCodeMessageString();
      } else {
        setOpCodeMessageString((String)value);
      }
      break;

    case CHANNEL_MESSAGE_STRING:
      if (value == null) {
        unsetChannelMessageString();
      } else {
        setChannelMessageString((String)value);
      }
      break;

    case PROVIDER_MESSAGE_STRING:
      if (value == null) {
        unsetProviderMessageString();
      } else {
        setProviderMessageString((String)value);
      }
      break;

    case KEYWORDS:
      if (value == null) {
        unsetKeywords();
      } else {
        setKeywords((String)value);
      }
      break;

    case EXECUTION_PROCESS_ID:
      if (value == null) {
        unsetExecutionProcessID();
      } else {
        setExecutionProcessID((String)value);
      }
      break;

    case EXECUTION_THREAD_ID:
      if (value == null) {
        unsetExecutionThreadID();
      } else {
        setExecutionThreadID((String)value);
      }
      break;

    case COMPUTER:
      if (value == null) {
        unsetComputer();
      } else {
        setComputer((String)value);
      }
      break;

    case EVENT_ID:
      if (value == null) {
        unsetEventID();
      } else {
        setEventID((String)value);
      }
      break;

    case MY_SUBJECT1:
      if (value == null) {
        unsetMySubject1();
      } else {
        setMySubject1((mySubject)value);
      }
      break;

    case MY_PROVIDER_INFORMATION1:
      if (value == null) {
        unsetMyProviderInformation1();
      } else {
        setMyProviderInformation1((myProviderInformation)value);
      }
      break;

    case MY_OBJECT1:
      if (value == null) {
        unsetMyObject1();
      } else {
        setMyObject1((myObject)value);
      }
      break;

    case MY_NETWORK_INFORMATION1:
      if (value == null) {
        unsetMyNetworkInformation1();
      } else {
        setMyNetworkInformation1((myNetworkInformation)value);
      }
      break;

    case MY_LAYER_INFORMATION1:
      if (value == null) {
        unsetMyLayerInformation1();
      } else {
        setMyLayerInformation1((myLayerInformation)value);
      }
      break;

    case MY_FILTER_INFORMATION1:
      if (value == null) {
        unsetMyFilterInformation1();
      } else {
        setMyFilterInformation1((myFilterInformation)value);
      }
      break;

    case MY_CHANGE_INFORMATION1:
      if (value == null) {
        unsetMyChangeInformation1();
      } else {
        setMyChangeInformation1((myChangeInformation)value);
      }
      break;

    case MY_CALLOUT_INFORMATION1:
      if (value == null) {
        unsetMyCalloutInformation1();
      } else {
        setMyCalloutInformation1((myCalloutInformation)value);
      }
      break;

    case MY_APPLICATION_INFORMATION1:
      if (value == null) {
        unsetMyApplicationInformation1();
      } else {
        setMyApplicationInformation1((myApplicationInformation)value);
      }
      break;

    case MY_ACCESS_REQUEST_INFORMATION1:
      if (value == null) {
        unsetMyAccessRequestInformation1();
      } else {
        setMyAccessRequestInformation1((myAccessRequestInformation)value);
      }
      break;

    case MY_RULE_INFORMATION1:
      if (value == null) {
        unsetMyRuleInformation1();
      } else {
        setMyRuleInformation1((myRuleInformation)value);
      }
      break;

    case MY_ERROR_INFORMATION1:
      if (value == null) {
        unsetMyErrorInformation1();
      } else {
        setMyErrorInformation1((myErrorInformation)value);
      }
      break;

    case MY_PROCESS_INFORMATION1:
      if (value == null) {
        unsetMyProcessInformation1();
      } else {
        setMyProcessInformation1((myProcessInformation)value);
      }
      break;

    case MY_LOGON_TYPE1:
      if (value == null) {
        unsetMyLogonType1();
      } else {
        setMyLogonType1((myLogonType)value);
      }
      break;

    case MY_IMPERSONATION_LEVEL1:
      if (value == null) {
        unsetMyImpersonationLevel1();
      } else {
        setMyImpersonationLevel1((myImpersonationLevel)value);
      }
      break;

    case MY_ACCOUNT_FOR_WHICH_LOGON_FAILED1:
      if (value == null) {
        unsetMyAccountForWhichLogonFailed1();
      } else {
        setMyAccountForWhichLogonFailed1((myAccountForWhichLogonFailed)value);
      }
      break;

    case MY_FAILURE_INFORMATION1:
      if (value == null) {
        unsetMyFailureInformation1();
      } else {
        setMyFailureInformation1((myFailureInformation)value);
      }
      break;

    case MY_NEW_LOGON1:
      if (value == null) {
        unsetMyNewLogon1();
      } else {
        setMyNewLogon1((myNewLogon)value);
      }
      break;

    case MY_DETAILED_AUTHENTICATION_INFORMATION1:
      if (value == null) {
        unsetMyDetailedAuthenticationInformation1();
      } else {
        setMyDetailedAuthenticationInformation1((myDetailedAuthenticationInformation)value);
      }
      break;

    case MY_TIME_STAMP1:
      if (value == null) {
        unsetMyTimeStamp1();
      } else {
        setMyTimeStamp1((myTimeStamp)value);
      }
      break;

    case MAC:
      if (value == null) {
        unsetMac();
      } else {
        setMac((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MESSAGE:
      return getMessage();

    case LEVEL_MESSAGE_STRING:
      return getLevelMessageString();

    case TASK_MESSAGE_STRING:
      return getTaskMessageString();

    case OP_CODE_MESSAGE_STRING:
      return getOpCodeMessageString();

    case CHANNEL_MESSAGE_STRING:
      return getChannelMessageString();

    case PROVIDER_MESSAGE_STRING:
      return getProviderMessageString();

    case KEYWORDS:
      return getKeywords();

    case EXECUTION_PROCESS_ID:
      return getExecutionProcessID();

    case EXECUTION_THREAD_ID:
      return getExecutionThreadID();

    case COMPUTER:
      return getComputer();

    case EVENT_ID:
      return getEventID();

    case MY_SUBJECT1:
      return getMySubject1();

    case MY_PROVIDER_INFORMATION1:
      return getMyProviderInformation1();

    case MY_OBJECT1:
      return getMyObject1();

    case MY_NETWORK_INFORMATION1:
      return getMyNetworkInformation1();

    case MY_LAYER_INFORMATION1:
      return getMyLayerInformation1();

    case MY_FILTER_INFORMATION1:
      return getMyFilterInformation1();

    case MY_CHANGE_INFORMATION1:
      return getMyChangeInformation1();

    case MY_CALLOUT_INFORMATION1:
      return getMyCalloutInformation1();

    case MY_APPLICATION_INFORMATION1:
      return getMyApplicationInformation1();

    case MY_ACCESS_REQUEST_INFORMATION1:
      return getMyAccessRequestInformation1();

    case MY_RULE_INFORMATION1:
      return getMyRuleInformation1();

    case MY_ERROR_INFORMATION1:
      return getMyErrorInformation1();

    case MY_PROCESS_INFORMATION1:
      return getMyProcessInformation1();

    case MY_LOGON_TYPE1:
      return getMyLogonType1();

    case MY_IMPERSONATION_LEVEL1:
      return getMyImpersonationLevel1();

    case MY_ACCOUNT_FOR_WHICH_LOGON_FAILED1:
      return getMyAccountForWhichLogonFailed1();

    case MY_FAILURE_INFORMATION1:
      return getMyFailureInformation1();

    case MY_NEW_LOGON1:
      return getMyNewLogon1();

    case MY_DETAILED_AUTHENTICATION_INFORMATION1:
      return getMyDetailedAuthenticationInformation1();

    case MY_TIME_STAMP1:
      return getMyTimeStamp1();

    case MAC:
      return getMac();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MESSAGE:
      return isSetMessage();
    case LEVEL_MESSAGE_STRING:
      return isSetLevelMessageString();
    case TASK_MESSAGE_STRING:
      return isSetTaskMessageString();
    case OP_CODE_MESSAGE_STRING:
      return isSetOpCodeMessageString();
    case CHANNEL_MESSAGE_STRING:
      return isSetChannelMessageString();
    case PROVIDER_MESSAGE_STRING:
      return isSetProviderMessageString();
    case KEYWORDS:
      return isSetKeywords();
    case EXECUTION_PROCESS_ID:
      return isSetExecutionProcessID();
    case EXECUTION_THREAD_ID:
      return isSetExecutionThreadID();
    case COMPUTER:
      return isSetComputer();
    case EVENT_ID:
      return isSetEventID();
    case MY_SUBJECT1:
      return isSetMySubject1();
    case MY_PROVIDER_INFORMATION1:
      return isSetMyProviderInformation1();
    case MY_OBJECT1:
      return isSetMyObject1();
    case MY_NETWORK_INFORMATION1:
      return isSetMyNetworkInformation1();
    case MY_LAYER_INFORMATION1:
      return isSetMyLayerInformation1();
    case MY_FILTER_INFORMATION1:
      return isSetMyFilterInformation1();
    case MY_CHANGE_INFORMATION1:
      return isSetMyChangeInformation1();
    case MY_CALLOUT_INFORMATION1:
      return isSetMyCalloutInformation1();
    case MY_APPLICATION_INFORMATION1:
      return isSetMyApplicationInformation1();
    case MY_ACCESS_REQUEST_INFORMATION1:
      return isSetMyAccessRequestInformation1();
    case MY_RULE_INFORMATION1:
      return isSetMyRuleInformation1();
    case MY_ERROR_INFORMATION1:
      return isSetMyErrorInformation1();
    case MY_PROCESS_INFORMATION1:
      return isSetMyProcessInformation1();
    case MY_LOGON_TYPE1:
      return isSetMyLogonType1();
    case MY_IMPERSONATION_LEVEL1:
      return isSetMyImpersonationLevel1();
    case MY_ACCOUNT_FOR_WHICH_LOGON_FAILED1:
      return isSetMyAccountForWhichLogonFailed1();
    case MY_FAILURE_INFORMATION1:
      return isSetMyFailureInformation1();
    case MY_NEW_LOGON1:
      return isSetMyNewLogon1();
    case MY_DETAILED_AUTHENTICATION_INFORMATION1:
      return isSetMyDetailedAuthenticationInformation1();
    case MY_TIME_STAMP1:
      return isSetMyTimeStamp1();
    case MAC:
      return isSetMac();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof myLogStructure)
      return this.equals((myLogStructure)that);
    return false;
  }

  public boolean equals(myLogStructure that) {
    if (that == null)
      return false;

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    boolean this_present_levelMessageString = true && this.isSetLevelMessageString();
    boolean that_present_levelMessageString = true && that.isSetLevelMessageString();
    if (this_present_levelMessageString || that_present_levelMessageString) {
      if (!(this_present_levelMessageString && that_present_levelMessageString))
        return false;
      if (!this.levelMessageString.equals(that.levelMessageString))
        return false;
    }

    boolean this_present_taskMessageString = true && this.isSetTaskMessageString();
    boolean that_present_taskMessageString = true && that.isSetTaskMessageString();
    if (this_present_taskMessageString || that_present_taskMessageString) {
      if (!(this_present_taskMessageString && that_present_taskMessageString))
        return false;
      if (!this.taskMessageString.equals(that.taskMessageString))
        return false;
    }

    boolean this_present_opCodeMessageString = true && this.isSetOpCodeMessageString();
    boolean that_present_opCodeMessageString = true && that.isSetOpCodeMessageString();
    if (this_present_opCodeMessageString || that_present_opCodeMessageString) {
      if (!(this_present_opCodeMessageString && that_present_opCodeMessageString))
        return false;
      if (!this.opCodeMessageString.equals(that.opCodeMessageString))
        return false;
    }

    boolean this_present_channelMessageString = true && this.isSetChannelMessageString();
    boolean that_present_channelMessageString = true && that.isSetChannelMessageString();
    if (this_present_channelMessageString || that_present_channelMessageString) {
      if (!(this_present_channelMessageString && that_present_channelMessageString))
        return false;
      if (!this.channelMessageString.equals(that.channelMessageString))
        return false;
    }

    boolean this_present_providerMessageString = true && this.isSetProviderMessageString();
    boolean that_present_providerMessageString = true && that.isSetProviderMessageString();
    if (this_present_providerMessageString || that_present_providerMessageString) {
      if (!(this_present_providerMessageString && that_present_providerMessageString))
        return false;
      if (!this.providerMessageString.equals(that.providerMessageString))
        return false;
    }

    boolean this_present_keywords = true && this.isSetKeywords();
    boolean that_present_keywords = true && that.isSetKeywords();
    if (this_present_keywords || that_present_keywords) {
      if (!(this_present_keywords && that_present_keywords))
        return false;
      if (!this.keywords.equals(that.keywords))
        return false;
    }

    boolean this_present_executionProcessID = true && this.isSetExecutionProcessID();
    boolean that_present_executionProcessID = true && that.isSetExecutionProcessID();
    if (this_present_executionProcessID || that_present_executionProcessID) {
      if (!(this_present_executionProcessID && that_present_executionProcessID))
        return false;
      if (!this.executionProcessID.equals(that.executionProcessID))
        return false;
    }

    boolean this_present_executionThreadID = true && this.isSetExecutionThreadID();
    boolean that_present_executionThreadID = true && that.isSetExecutionThreadID();
    if (this_present_executionThreadID || that_present_executionThreadID) {
      if (!(this_present_executionThreadID && that_present_executionThreadID))
        return false;
      if (!this.executionThreadID.equals(that.executionThreadID))
        return false;
    }

    boolean this_present_computer = true && this.isSetComputer();
    boolean that_present_computer = true && that.isSetComputer();
    if (this_present_computer || that_present_computer) {
      if (!(this_present_computer && that_present_computer))
        return false;
      if (!this.computer.equals(that.computer))
        return false;
    }

    boolean this_present_EventID = true && this.isSetEventID();
    boolean that_present_EventID = true && that.isSetEventID();
    if (this_present_EventID || that_present_EventID) {
      if (!(this_present_EventID && that_present_EventID))
        return false;
      if (!this.EventID.equals(that.EventID))
        return false;
    }

    boolean this_present_mySubject1 = true && this.isSetMySubject1();
    boolean that_present_mySubject1 = true && that.isSetMySubject1();
    if (this_present_mySubject1 || that_present_mySubject1) {
      if (!(this_present_mySubject1 && that_present_mySubject1))
        return false;
      if (!this.mySubject1.equals(that.mySubject1))
        return false;
    }

    boolean this_present_myProviderInformation1 = true && this.isSetMyProviderInformation1();
    boolean that_present_myProviderInformation1 = true && that.isSetMyProviderInformation1();
    if (this_present_myProviderInformation1 || that_present_myProviderInformation1) {
      if (!(this_present_myProviderInformation1 && that_present_myProviderInformation1))
        return false;
      if (!this.myProviderInformation1.equals(that.myProviderInformation1))
        return false;
    }

    boolean this_present_myObject1 = true && this.isSetMyObject1();
    boolean that_present_myObject1 = true && that.isSetMyObject1();
    if (this_present_myObject1 || that_present_myObject1) {
      if (!(this_present_myObject1 && that_present_myObject1))
        return false;
      if (!this.myObject1.equals(that.myObject1))
        return false;
    }

    boolean this_present_myNetworkInformation1 = true && this.isSetMyNetworkInformation1();
    boolean that_present_myNetworkInformation1 = true && that.isSetMyNetworkInformation1();
    if (this_present_myNetworkInformation1 || that_present_myNetworkInformation1) {
      if (!(this_present_myNetworkInformation1 && that_present_myNetworkInformation1))
        return false;
      if (!this.myNetworkInformation1.equals(that.myNetworkInformation1))
        return false;
    }

    boolean this_present_myLayerInformation1 = true && this.isSetMyLayerInformation1();
    boolean that_present_myLayerInformation1 = true && that.isSetMyLayerInformation1();
    if (this_present_myLayerInformation1 || that_present_myLayerInformation1) {
      if (!(this_present_myLayerInformation1 && that_present_myLayerInformation1))
        return false;
      if (!this.myLayerInformation1.equals(that.myLayerInformation1))
        return false;
    }

    boolean this_present_myFilterInformation1 = true && this.isSetMyFilterInformation1();
    boolean that_present_myFilterInformation1 = true && that.isSetMyFilterInformation1();
    if (this_present_myFilterInformation1 || that_present_myFilterInformation1) {
      if (!(this_present_myFilterInformation1 && that_present_myFilterInformation1))
        return false;
      if (!this.myFilterInformation1.equals(that.myFilterInformation1))
        return false;
    }

    boolean this_present_myChangeInformation1 = true && this.isSetMyChangeInformation1();
    boolean that_present_myChangeInformation1 = true && that.isSetMyChangeInformation1();
    if (this_present_myChangeInformation1 || that_present_myChangeInformation1) {
      if (!(this_present_myChangeInformation1 && that_present_myChangeInformation1))
        return false;
      if (!this.myChangeInformation1.equals(that.myChangeInformation1))
        return false;
    }

    boolean this_present_myCalloutInformation1 = true && this.isSetMyCalloutInformation1();
    boolean that_present_myCalloutInformation1 = true && that.isSetMyCalloutInformation1();
    if (this_present_myCalloutInformation1 || that_present_myCalloutInformation1) {
      if (!(this_present_myCalloutInformation1 && that_present_myCalloutInformation1))
        return false;
      if (!this.myCalloutInformation1.equals(that.myCalloutInformation1))
        return false;
    }

    boolean this_present_myApplicationInformation1 = true && this.isSetMyApplicationInformation1();
    boolean that_present_myApplicationInformation1 = true && that.isSetMyApplicationInformation1();
    if (this_present_myApplicationInformation1 || that_present_myApplicationInformation1) {
      if (!(this_present_myApplicationInformation1 && that_present_myApplicationInformation1))
        return false;
      if (!this.myApplicationInformation1.equals(that.myApplicationInformation1))
        return false;
    }

    boolean this_present_myAccessRequestInformation1 = true && this.isSetMyAccessRequestInformation1();
    boolean that_present_myAccessRequestInformation1 = true && that.isSetMyAccessRequestInformation1();
    if (this_present_myAccessRequestInformation1 || that_present_myAccessRequestInformation1) {
      if (!(this_present_myAccessRequestInformation1 && that_present_myAccessRequestInformation1))
        return false;
      if (!this.myAccessRequestInformation1.equals(that.myAccessRequestInformation1))
        return false;
    }

    boolean this_present_myRuleInformation1 = true && this.isSetMyRuleInformation1();
    boolean that_present_myRuleInformation1 = true && that.isSetMyRuleInformation1();
    if (this_present_myRuleInformation1 || that_present_myRuleInformation1) {
      if (!(this_present_myRuleInformation1 && that_present_myRuleInformation1))
        return false;
      if (!this.myRuleInformation1.equals(that.myRuleInformation1))
        return false;
    }

    boolean this_present_myErrorInformation1 = true && this.isSetMyErrorInformation1();
    boolean that_present_myErrorInformation1 = true && that.isSetMyErrorInformation1();
    if (this_present_myErrorInformation1 || that_present_myErrorInformation1) {
      if (!(this_present_myErrorInformation1 && that_present_myErrorInformation1))
        return false;
      if (!this.myErrorInformation1.equals(that.myErrorInformation1))
        return false;
    }

    boolean this_present_myProcessInformation1 = true && this.isSetMyProcessInformation1();
    boolean that_present_myProcessInformation1 = true && that.isSetMyProcessInformation1();
    if (this_present_myProcessInformation1 || that_present_myProcessInformation1) {
      if (!(this_present_myProcessInformation1 && that_present_myProcessInformation1))
        return false;
      if (!this.myProcessInformation1.equals(that.myProcessInformation1))
        return false;
    }

    boolean this_present_myLogonType1 = true && this.isSetMyLogonType1();
    boolean that_present_myLogonType1 = true && that.isSetMyLogonType1();
    if (this_present_myLogonType1 || that_present_myLogonType1) {
      if (!(this_present_myLogonType1 && that_present_myLogonType1))
        return false;
      if (!this.myLogonType1.equals(that.myLogonType1))
        return false;
    }

    boolean this_present_myImpersonationLevel1 = true && this.isSetMyImpersonationLevel1();
    boolean that_present_myImpersonationLevel1 = true && that.isSetMyImpersonationLevel1();
    if (this_present_myImpersonationLevel1 || that_present_myImpersonationLevel1) {
      if (!(this_present_myImpersonationLevel1 && that_present_myImpersonationLevel1))
        return false;
      if (!this.myImpersonationLevel1.equals(that.myImpersonationLevel1))
        return false;
    }

    boolean this_present_myAccountForWhichLogonFailed1 = true && this.isSetMyAccountForWhichLogonFailed1();
    boolean that_present_myAccountForWhichLogonFailed1 = true && that.isSetMyAccountForWhichLogonFailed1();
    if (this_present_myAccountForWhichLogonFailed1 || that_present_myAccountForWhichLogonFailed1) {
      if (!(this_present_myAccountForWhichLogonFailed1 && that_present_myAccountForWhichLogonFailed1))
        return false;
      if (!this.myAccountForWhichLogonFailed1.equals(that.myAccountForWhichLogonFailed1))
        return false;
    }

    boolean this_present_myFailureInformation1 = true && this.isSetMyFailureInformation1();
    boolean that_present_myFailureInformation1 = true && that.isSetMyFailureInformation1();
    if (this_present_myFailureInformation1 || that_present_myFailureInformation1) {
      if (!(this_present_myFailureInformation1 && that_present_myFailureInformation1))
        return false;
      if (!this.myFailureInformation1.equals(that.myFailureInformation1))
        return false;
    }

    boolean this_present_myNewLogon1 = true && this.isSetMyNewLogon1();
    boolean that_present_myNewLogon1 = true && that.isSetMyNewLogon1();
    if (this_present_myNewLogon1 || that_present_myNewLogon1) {
      if (!(this_present_myNewLogon1 && that_present_myNewLogon1))
        return false;
      if (!this.myNewLogon1.equals(that.myNewLogon1))
        return false;
    }

    boolean this_present_myDetailedAuthenticationInformation1 = true && this.isSetMyDetailedAuthenticationInformation1();
    boolean that_present_myDetailedAuthenticationInformation1 = true && that.isSetMyDetailedAuthenticationInformation1();
    if (this_present_myDetailedAuthenticationInformation1 || that_present_myDetailedAuthenticationInformation1) {
      if (!(this_present_myDetailedAuthenticationInformation1 && that_present_myDetailedAuthenticationInformation1))
        return false;
      if (!this.myDetailedAuthenticationInformation1.equals(that.myDetailedAuthenticationInformation1))
        return false;
    }

    boolean this_present_myTimeStamp1 = true && this.isSetMyTimeStamp1();
    boolean that_present_myTimeStamp1 = true && that.isSetMyTimeStamp1();
    if (this_present_myTimeStamp1 || that_present_myTimeStamp1) {
      if (!(this_present_myTimeStamp1 && that_present_myTimeStamp1))
        return false;
      if (!this.myTimeStamp1.equals(that.myTimeStamp1))
        return false;
    }

    boolean this_present_mac = true && this.isSetMac();
    boolean that_present_mac = true && that.isSetMac();
    if (this_present_mac || that_present_mac) {
      if (!(this_present_mac && that_present_mac))
        return false;
      if (!this.mac.equals(that.mac))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_message = true && (isSetMessage());
    list.add(present_message);
    if (present_message)
      list.add(message);

    boolean present_levelMessageString = true && (isSetLevelMessageString());
    list.add(present_levelMessageString);
    if (present_levelMessageString)
      list.add(levelMessageString);

    boolean present_taskMessageString = true && (isSetTaskMessageString());
    list.add(present_taskMessageString);
    if (present_taskMessageString)
      list.add(taskMessageString);

    boolean present_opCodeMessageString = true && (isSetOpCodeMessageString());
    list.add(present_opCodeMessageString);
    if (present_opCodeMessageString)
      list.add(opCodeMessageString);

    boolean present_channelMessageString = true && (isSetChannelMessageString());
    list.add(present_channelMessageString);
    if (present_channelMessageString)
      list.add(channelMessageString);

    boolean present_providerMessageString = true && (isSetProviderMessageString());
    list.add(present_providerMessageString);
    if (present_providerMessageString)
      list.add(providerMessageString);

    boolean present_keywords = true && (isSetKeywords());
    list.add(present_keywords);
    if (present_keywords)
      list.add(keywords);

    boolean present_executionProcessID = true && (isSetExecutionProcessID());
    list.add(present_executionProcessID);
    if (present_executionProcessID)
      list.add(executionProcessID);

    boolean present_executionThreadID = true && (isSetExecutionThreadID());
    list.add(present_executionThreadID);
    if (present_executionThreadID)
      list.add(executionThreadID);

    boolean present_computer = true && (isSetComputer());
    list.add(present_computer);
    if (present_computer)
      list.add(computer);

    boolean present_EventID = true && (isSetEventID());
    list.add(present_EventID);
    if (present_EventID)
      list.add(EventID);

    boolean present_mySubject1 = true && (isSetMySubject1());
    list.add(present_mySubject1);
    if (present_mySubject1)
      list.add(mySubject1);

    boolean present_myProviderInformation1 = true && (isSetMyProviderInformation1());
    list.add(present_myProviderInformation1);
    if (present_myProviderInformation1)
      list.add(myProviderInformation1);

    boolean present_myObject1 = true && (isSetMyObject1());
    list.add(present_myObject1);
    if (present_myObject1)
      list.add(myObject1);

    boolean present_myNetworkInformation1 = true && (isSetMyNetworkInformation1());
    list.add(present_myNetworkInformation1);
    if (present_myNetworkInformation1)
      list.add(myNetworkInformation1);

    boolean present_myLayerInformation1 = true && (isSetMyLayerInformation1());
    list.add(present_myLayerInformation1);
    if (present_myLayerInformation1)
      list.add(myLayerInformation1);

    boolean present_myFilterInformation1 = true && (isSetMyFilterInformation1());
    list.add(present_myFilterInformation1);
    if (present_myFilterInformation1)
      list.add(myFilterInformation1);

    boolean present_myChangeInformation1 = true && (isSetMyChangeInformation1());
    list.add(present_myChangeInformation1);
    if (present_myChangeInformation1)
      list.add(myChangeInformation1);

    boolean present_myCalloutInformation1 = true && (isSetMyCalloutInformation1());
    list.add(present_myCalloutInformation1);
    if (present_myCalloutInformation1)
      list.add(myCalloutInformation1);

    boolean present_myApplicationInformation1 = true && (isSetMyApplicationInformation1());
    list.add(present_myApplicationInformation1);
    if (present_myApplicationInformation1)
      list.add(myApplicationInformation1);

    boolean present_myAccessRequestInformation1 = true && (isSetMyAccessRequestInformation1());
    list.add(present_myAccessRequestInformation1);
    if (present_myAccessRequestInformation1)
      list.add(myAccessRequestInformation1);

    boolean present_myRuleInformation1 = true && (isSetMyRuleInformation1());
    list.add(present_myRuleInformation1);
    if (present_myRuleInformation1)
      list.add(myRuleInformation1);

    boolean present_myErrorInformation1 = true && (isSetMyErrorInformation1());
    list.add(present_myErrorInformation1);
    if (present_myErrorInformation1)
      list.add(myErrorInformation1);

    boolean present_myProcessInformation1 = true && (isSetMyProcessInformation1());
    list.add(present_myProcessInformation1);
    if (present_myProcessInformation1)
      list.add(myProcessInformation1);

    boolean present_myLogonType1 = true && (isSetMyLogonType1());
    list.add(present_myLogonType1);
    if (present_myLogonType1)
      list.add(myLogonType1);

    boolean present_myImpersonationLevel1 = true && (isSetMyImpersonationLevel1());
    list.add(present_myImpersonationLevel1);
    if (present_myImpersonationLevel1)
      list.add(myImpersonationLevel1);

    boolean present_myAccountForWhichLogonFailed1 = true && (isSetMyAccountForWhichLogonFailed1());
    list.add(present_myAccountForWhichLogonFailed1);
    if (present_myAccountForWhichLogonFailed1)
      list.add(myAccountForWhichLogonFailed1);

    boolean present_myFailureInformation1 = true && (isSetMyFailureInformation1());
    list.add(present_myFailureInformation1);
    if (present_myFailureInformation1)
      list.add(myFailureInformation1);

    boolean present_myNewLogon1 = true && (isSetMyNewLogon1());
    list.add(present_myNewLogon1);
    if (present_myNewLogon1)
      list.add(myNewLogon1);

    boolean present_myDetailedAuthenticationInformation1 = true && (isSetMyDetailedAuthenticationInformation1());
    list.add(present_myDetailedAuthenticationInformation1);
    if (present_myDetailedAuthenticationInformation1)
      list.add(myDetailedAuthenticationInformation1);

    boolean present_myTimeStamp1 = true && (isSetMyTimeStamp1());
    list.add(present_myTimeStamp1);
    if (present_myTimeStamp1)
      list.add(myTimeStamp1);

    boolean present_mac = true && (isSetMac());
    list.add(present_mac);
    if (present_mac)
      list.add(mac);

    return list.hashCode();
  }

  @Override
  public int compareTo(myLogStructure other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLevelMessageString()).compareTo(other.isSetLevelMessageString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLevelMessageString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.levelMessageString, other.levelMessageString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaskMessageString()).compareTo(other.isSetTaskMessageString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskMessageString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskMessageString, other.taskMessageString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpCodeMessageString()).compareTo(other.isSetOpCodeMessageString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpCodeMessageString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opCodeMessageString, other.opCodeMessageString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChannelMessageString()).compareTo(other.isSetChannelMessageString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannelMessageString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelMessageString, other.channelMessageString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProviderMessageString()).compareTo(other.isSetProviderMessageString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProviderMessageString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.providerMessageString, other.providerMessageString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKeywords()).compareTo(other.isSetKeywords());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeywords()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keywords, other.keywords);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExecutionProcessID()).compareTo(other.isSetExecutionProcessID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecutionProcessID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.executionProcessID, other.executionProcessID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExecutionThreadID()).compareTo(other.isSetExecutionThreadID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecutionThreadID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.executionThreadID, other.executionThreadID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComputer()).compareTo(other.isSetComputer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComputer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.computer, other.computer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEventID()).compareTo(other.isSetEventID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.EventID, other.EventID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMySubject1()).compareTo(other.isSetMySubject1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMySubject1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mySubject1, other.mySubject1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMyProviderInformation1()).compareTo(other.isSetMyProviderInformation1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMyProviderInformation1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myProviderInformation1, other.myProviderInformation1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMyObject1()).compareTo(other.isSetMyObject1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMyObject1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myObject1, other.myObject1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMyNetworkInformation1()).compareTo(other.isSetMyNetworkInformation1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMyNetworkInformation1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myNetworkInformation1, other.myNetworkInformation1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMyLayerInformation1()).compareTo(other.isSetMyLayerInformation1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMyLayerInformation1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myLayerInformation1, other.myLayerInformation1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMyFilterInformation1()).compareTo(other.isSetMyFilterInformation1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMyFilterInformation1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myFilterInformation1, other.myFilterInformation1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMyChangeInformation1()).compareTo(other.isSetMyChangeInformation1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMyChangeInformation1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myChangeInformation1, other.myChangeInformation1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMyCalloutInformation1()).compareTo(other.isSetMyCalloutInformation1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMyCalloutInformation1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myCalloutInformation1, other.myCalloutInformation1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMyApplicationInformation1()).compareTo(other.isSetMyApplicationInformation1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMyApplicationInformation1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myApplicationInformation1, other.myApplicationInformation1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMyAccessRequestInformation1()).compareTo(other.isSetMyAccessRequestInformation1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMyAccessRequestInformation1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myAccessRequestInformation1, other.myAccessRequestInformation1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMyRuleInformation1()).compareTo(other.isSetMyRuleInformation1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMyRuleInformation1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myRuleInformation1, other.myRuleInformation1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMyErrorInformation1()).compareTo(other.isSetMyErrorInformation1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMyErrorInformation1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myErrorInformation1, other.myErrorInformation1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMyProcessInformation1()).compareTo(other.isSetMyProcessInformation1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMyProcessInformation1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myProcessInformation1, other.myProcessInformation1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMyLogonType1()).compareTo(other.isSetMyLogonType1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMyLogonType1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myLogonType1, other.myLogonType1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMyImpersonationLevel1()).compareTo(other.isSetMyImpersonationLevel1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMyImpersonationLevel1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myImpersonationLevel1, other.myImpersonationLevel1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMyAccountForWhichLogonFailed1()).compareTo(other.isSetMyAccountForWhichLogonFailed1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMyAccountForWhichLogonFailed1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myAccountForWhichLogonFailed1, other.myAccountForWhichLogonFailed1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMyFailureInformation1()).compareTo(other.isSetMyFailureInformation1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMyFailureInformation1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myFailureInformation1, other.myFailureInformation1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMyNewLogon1()).compareTo(other.isSetMyNewLogon1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMyNewLogon1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myNewLogon1, other.myNewLogon1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMyDetailedAuthenticationInformation1()).compareTo(other.isSetMyDetailedAuthenticationInformation1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMyDetailedAuthenticationInformation1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myDetailedAuthenticationInformation1, other.myDetailedAuthenticationInformation1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMyTimeStamp1()).compareTo(other.isSetMyTimeStamp1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMyTimeStamp1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myTimeStamp1, other.myTimeStamp1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMac()).compareTo(other.isSetMac());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMac()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mac, other.mac);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("myLogStructure(");
    boolean first = true;

    sb.append("message:");
    if (this.message == null) {
      sb.append("null");
    } else {
      sb.append(this.message);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("levelMessageString:");
    if (this.levelMessageString == null) {
      sb.append("null");
    } else {
      sb.append(this.levelMessageString);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("taskMessageString:");
    if (this.taskMessageString == null) {
      sb.append("null");
    } else {
      sb.append(this.taskMessageString);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("opCodeMessageString:");
    if (this.opCodeMessageString == null) {
      sb.append("null");
    } else {
      sb.append(this.opCodeMessageString);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("channelMessageString:");
    if (this.channelMessageString == null) {
      sb.append("null");
    } else {
      sb.append(this.channelMessageString);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("providerMessageString:");
    if (this.providerMessageString == null) {
      sb.append("null");
    } else {
      sb.append(this.providerMessageString);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("keywords:");
    if (this.keywords == null) {
      sb.append("null");
    } else {
      sb.append(this.keywords);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("executionProcessID:");
    if (this.executionProcessID == null) {
      sb.append("null");
    } else {
      sb.append(this.executionProcessID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("executionThreadID:");
    if (this.executionThreadID == null) {
      sb.append("null");
    } else {
      sb.append(this.executionThreadID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("computer:");
    if (this.computer == null) {
      sb.append("null");
    } else {
      sb.append(this.computer);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("EventID:");
    if (this.EventID == null) {
      sb.append("null");
    } else {
      sb.append(this.EventID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mySubject1:");
    if (this.mySubject1 == null) {
      sb.append("null");
    } else {
      sb.append(this.mySubject1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("myProviderInformation1:");
    if (this.myProviderInformation1 == null) {
      sb.append("null");
    } else {
      sb.append(this.myProviderInformation1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("myObject1:");
    if (this.myObject1 == null) {
      sb.append("null");
    } else {
      sb.append(this.myObject1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("myNetworkInformation1:");
    if (this.myNetworkInformation1 == null) {
      sb.append("null");
    } else {
      sb.append(this.myNetworkInformation1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("myLayerInformation1:");
    if (this.myLayerInformation1 == null) {
      sb.append("null");
    } else {
      sb.append(this.myLayerInformation1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("myFilterInformation1:");
    if (this.myFilterInformation1 == null) {
      sb.append("null");
    } else {
      sb.append(this.myFilterInformation1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("myChangeInformation1:");
    if (this.myChangeInformation1 == null) {
      sb.append("null");
    } else {
      sb.append(this.myChangeInformation1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("myCalloutInformation1:");
    if (this.myCalloutInformation1 == null) {
      sb.append("null");
    } else {
      sb.append(this.myCalloutInformation1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("myApplicationInformation1:");
    if (this.myApplicationInformation1 == null) {
      sb.append("null");
    } else {
      sb.append(this.myApplicationInformation1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("myAccessRequestInformation1:");
    if (this.myAccessRequestInformation1 == null) {
      sb.append("null");
    } else {
      sb.append(this.myAccessRequestInformation1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("myRuleInformation1:");
    if (this.myRuleInformation1 == null) {
      sb.append("null");
    } else {
      sb.append(this.myRuleInformation1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("myErrorInformation1:");
    if (this.myErrorInformation1 == null) {
      sb.append("null");
    } else {
      sb.append(this.myErrorInformation1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("myProcessInformation1:");
    if (this.myProcessInformation1 == null) {
      sb.append("null");
    } else {
      sb.append(this.myProcessInformation1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("myLogonType1:");
    if (this.myLogonType1 == null) {
      sb.append("null");
    } else {
      sb.append(this.myLogonType1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("myImpersonationLevel1:");
    if (this.myImpersonationLevel1 == null) {
      sb.append("null");
    } else {
      sb.append(this.myImpersonationLevel1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("myAccountForWhichLogonFailed1:");
    if (this.myAccountForWhichLogonFailed1 == null) {
      sb.append("null");
    } else {
      sb.append(this.myAccountForWhichLogonFailed1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("myFailureInformation1:");
    if (this.myFailureInformation1 == null) {
      sb.append("null");
    } else {
      sb.append(this.myFailureInformation1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("myNewLogon1:");
    if (this.myNewLogon1 == null) {
      sb.append("null");
    } else {
      sb.append(this.myNewLogon1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("myDetailedAuthenticationInformation1:");
    if (this.myDetailedAuthenticationInformation1 == null) {
      sb.append("null");
    } else {
      sb.append(this.myDetailedAuthenticationInformation1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("myTimeStamp1:");
    if (this.myTimeStamp1 == null) {
      sb.append("null");
    } else {
      sb.append(this.myTimeStamp1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mac:");
    if (this.mac == null) {
      sb.append("null");
    } else {
      sb.append(this.mac);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (mySubject1 != null) {
      mySubject1.validate();
    }
    if (myProviderInformation1 != null) {
      myProviderInformation1.validate();
    }
    if (myObject1 != null) {
      myObject1.validate();
    }
    if (myNetworkInformation1 != null) {
      myNetworkInformation1.validate();
    }
    if (myLayerInformation1 != null) {
      myLayerInformation1.validate();
    }
    if (myFilterInformation1 != null) {
      myFilterInformation1.validate();
    }
    if (myChangeInformation1 != null) {
      myChangeInformation1.validate();
    }
    if (myCalloutInformation1 != null) {
      myCalloutInformation1.validate();
    }
    if (myApplicationInformation1 != null) {
      myApplicationInformation1.validate();
    }
    if (myAccessRequestInformation1 != null) {
      myAccessRequestInformation1.validate();
    }
    if (myRuleInformation1 != null) {
      myRuleInformation1.validate();
    }
    if (myErrorInformation1 != null) {
      myErrorInformation1.validate();
    }
    if (myProcessInformation1 != null) {
      myProcessInformation1.validate();
    }
    if (myLogonType1 != null) {
      myLogonType1.validate();
    }
    if (myImpersonationLevel1 != null) {
      myImpersonationLevel1.validate();
    }
    if (myAccountForWhichLogonFailed1 != null) {
      myAccountForWhichLogonFailed1.validate();
    }
    if (myFailureInformation1 != null) {
      myFailureInformation1.validate();
    }
    if (myNewLogon1 != null) {
      myNewLogon1.validate();
    }
    if (myDetailedAuthenticationInformation1 != null) {
      myDetailedAuthenticationInformation1.validate();
    }
    if (myTimeStamp1 != null) {
      myTimeStamp1.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class myLogStructureStandardSchemeFactory implements SchemeFactory {
    public myLogStructureStandardScheme getScheme() {
      return new myLogStructureStandardScheme();
    }
  }

  private static class myLogStructureStandardScheme extends StandardScheme<myLogStructure> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, myLogStructure struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.message = iprot.readString();
              struct.setMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LEVEL_MESSAGE_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.levelMessageString = iprot.readString();
              struct.setLevelMessageStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TASK_MESSAGE_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.taskMessageString = iprot.readString();
              struct.setTaskMessageStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OP_CODE_MESSAGE_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.opCodeMessageString = iprot.readString();
              struct.setOpCodeMessageStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CHANNEL_MESSAGE_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.channelMessageString = iprot.readString();
              struct.setChannelMessageStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PROVIDER_MESSAGE_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.providerMessageString = iprot.readString();
              struct.setProviderMessageStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // KEYWORDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.keywords = iprot.readString();
              struct.setKeywordsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // EXECUTION_PROCESS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.executionProcessID = iprot.readString();
              struct.setExecutionProcessIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // EXECUTION_THREAD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.executionThreadID = iprot.readString();
              struct.setExecutionThreadIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // COMPUTER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.computer = iprot.readString();
              struct.setComputerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // EVENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.EventID = iprot.readString();
              struct.setEventIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // MY_SUBJECT1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.mySubject1 = new mySubject();
              struct.mySubject1.read(iprot);
              struct.setMySubject1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // MY_PROVIDER_INFORMATION1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.myProviderInformation1 = new myProviderInformation();
              struct.myProviderInformation1.read(iprot);
              struct.setMyProviderInformation1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // MY_OBJECT1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.myObject1 = new myObject();
              struct.myObject1.read(iprot);
              struct.setMyObject1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // MY_NETWORK_INFORMATION1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.myNetworkInformation1 = new myNetworkInformation();
              struct.myNetworkInformation1.read(iprot);
              struct.setMyNetworkInformation1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // MY_LAYER_INFORMATION1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.myLayerInformation1 = new myLayerInformation();
              struct.myLayerInformation1.read(iprot);
              struct.setMyLayerInformation1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // MY_FILTER_INFORMATION1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.myFilterInformation1 = new myFilterInformation();
              struct.myFilterInformation1.read(iprot);
              struct.setMyFilterInformation1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // MY_CHANGE_INFORMATION1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.myChangeInformation1 = new myChangeInformation();
              struct.myChangeInformation1.read(iprot);
              struct.setMyChangeInformation1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // MY_CALLOUT_INFORMATION1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.myCalloutInformation1 = new myCalloutInformation();
              struct.myCalloutInformation1.read(iprot);
              struct.setMyCalloutInformation1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // MY_APPLICATION_INFORMATION1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.myApplicationInformation1 = new myApplicationInformation();
              struct.myApplicationInformation1.read(iprot);
              struct.setMyApplicationInformation1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // MY_ACCESS_REQUEST_INFORMATION1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.myAccessRequestInformation1 = new myAccessRequestInformation();
              struct.myAccessRequestInformation1.read(iprot);
              struct.setMyAccessRequestInformation1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // MY_RULE_INFORMATION1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.myRuleInformation1 = new myRuleInformation();
              struct.myRuleInformation1.read(iprot);
              struct.setMyRuleInformation1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // MY_ERROR_INFORMATION1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.myErrorInformation1 = new myErrorInformation();
              struct.myErrorInformation1.read(iprot);
              struct.setMyErrorInformation1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // MY_PROCESS_INFORMATION1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.myProcessInformation1 = new myProcessInformation();
              struct.myProcessInformation1.read(iprot);
              struct.setMyProcessInformation1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // MY_LOGON_TYPE1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.myLogonType1 = new myLogonType();
              struct.myLogonType1.read(iprot);
              struct.setMyLogonType1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // MY_IMPERSONATION_LEVEL1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.myImpersonationLevel1 = new myImpersonationLevel();
              struct.myImpersonationLevel1.read(iprot);
              struct.setMyImpersonationLevel1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // MY_ACCOUNT_FOR_WHICH_LOGON_FAILED1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.myAccountForWhichLogonFailed1 = new myAccountForWhichLogonFailed();
              struct.myAccountForWhichLogonFailed1.read(iprot);
              struct.setMyAccountForWhichLogonFailed1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // MY_FAILURE_INFORMATION1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.myFailureInformation1 = new myFailureInformation();
              struct.myFailureInformation1.read(iprot);
              struct.setMyFailureInformation1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // MY_NEW_LOGON1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.myNewLogon1 = new myNewLogon();
              struct.myNewLogon1.read(iprot);
              struct.setMyNewLogon1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // MY_DETAILED_AUTHENTICATION_INFORMATION1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.myDetailedAuthenticationInformation1 = new myDetailedAuthenticationInformation();
              struct.myDetailedAuthenticationInformation1.read(iprot);
              struct.setMyDetailedAuthenticationInformation1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // MY_TIME_STAMP1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.myTimeStamp1 = new myTimeStamp();
              struct.myTimeStamp1.read(iprot);
              struct.setMyTimeStamp1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // MAC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mac = iprot.readString();
              struct.setMacIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, myLogStructure struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.message != null) {
        oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
        oprot.writeString(struct.message);
        oprot.writeFieldEnd();
      }
      if (struct.levelMessageString != null) {
        oprot.writeFieldBegin(LEVEL_MESSAGE_STRING_FIELD_DESC);
        oprot.writeString(struct.levelMessageString);
        oprot.writeFieldEnd();
      }
      if (struct.taskMessageString != null) {
        oprot.writeFieldBegin(TASK_MESSAGE_STRING_FIELD_DESC);
        oprot.writeString(struct.taskMessageString);
        oprot.writeFieldEnd();
      }
      if (struct.opCodeMessageString != null) {
        oprot.writeFieldBegin(OP_CODE_MESSAGE_STRING_FIELD_DESC);
        oprot.writeString(struct.opCodeMessageString);
        oprot.writeFieldEnd();
      }
      if (struct.channelMessageString != null) {
        oprot.writeFieldBegin(CHANNEL_MESSAGE_STRING_FIELD_DESC);
        oprot.writeString(struct.channelMessageString);
        oprot.writeFieldEnd();
      }
      if (struct.providerMessageString != null) {
        oprot.writeFieldBegin(PROVIDER_MESSAGE_STRING_FIELD_DESC);
        oprot.writeString(struct.providerMessageString);
        oprot.writeFieldEnd();
      }
      if (struct.keywords != null) {
        oprot.writeFieldBegin(KEYWORDS_FIELD_DESC);
        oprot.writeString(struct.keywords);
        oprot.writeFieldEnd();
      }
      if (struct.executionProcessID != null) {
        oprot.writeFieldBegin(EXECUTION_PROCESS_ID_FIELD_DESC);
        oprot.writeString(struct.executionProcessID);
        oprot.writeFieldEnd();
      }
      if (struct.executionThreadID != null) {
        oprot.writeFieldBegin(EXECUTION_THREAD_ID_FIELD_DESC);
        oprot.writeString(struct.executionThreadID);
        oprot.writeFieldEnd();
      }
      if (struct.computer != null) {
        oprot.writeFieldBegin(COMPUTER_FIELD_DESC);
        oprot.writeString(struct.computer);
        oprot.writeFieldEnd();
      }
      if (struct.EventID != null) {
        oprot.writeFieldBegin(EVENT_ID_FIELD_DESC);
        oprot.writeString(struct.EventID);
        oprot.writeFieldEnd();
      }
      if (struct.mySubject1 != null) {
        oprot.writeFieldBegin(MY_SUBJECT1_FIELD_DESC);
        struct.mySubject1.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.myProviderInformation1 != null) {
        oprot.writeFieldBegin(MY_PROVIDER_INFORMATION1_FIELD_DESC);
        struct.myProviderInformation1.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.myObject1 != null) {
        oprot.writeFieldBegin(MY_OBJECT1_FIELD_DESC);
        struct.myObject1.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.myNetworkInformation1 != null) {
        oprot.writeFieldBegin(MY_NETWORK_INFORMATION1_FIELD_DESC);
        struct.myNetworkInformation1.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.myLayerInformation1 != null) {
        oprot.writeFieldBegin(MY_LAYER_INFORMATION1_FIELD_DESC);
        struct.myLayerInformation1.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.myFilterInformation1 != null) {
        oprot.writeFieldBegin(MY_FILTER_INFORMATION1_FIELD_DESC);
        struct.myFilterInformation1.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.myChangeInformation1 != null) {
        oprot.writeFieldBegin(MY_CHANGE_INFORMATION1_FIELD_DESC);
        struct.myChangeInformation1.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.myCalloutInformation1 != null) {
        oprot.writeFieldBegin(MY_CALLOUT_INFORMATION1_FIELD_DESC);
        struct.myCalloutInformation1.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.myApplicationInformation1 != null) {
        oprot.writeFieldBegin(MY_APPLICATION_INFORMATION1_FIELD_DESC);
        struct.myApplicationInformation1.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.myAccessRequestInformation1 != null) {
        oprot.writeFieldBegin(MY_ACCESS_REQUEST_INFORMATION1_FIELD_DESC);
        struct.myAccessRequestInformation1.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.myRuleInformation1 != null) {
        oprot.writeFieldBegin(MY_RULE_INFORMATION1_FIELD_DESC);
        struct.myRuleInformation1.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.myErrorInformation1 != null) {
        oprot.writeFieldBegin(MY_ERROR_INFORMATION1_FIELD_DESC);
        struct.myErrorInformation1.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.myProcessInformation1 != null) {
        oprot.writeFieldBegin(MY_PROCESS_INFORMATION1_FIELD_DESC);
        struct.myProcessInformation1.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.myLogonType1 != null) {
        oprot.writeFieldBegin(MY_LOGON_TYPE1_FIELD_DESC);
        struct.myLogonType1.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.myImpersonationLevel1 != null) {
        oprot.writeFieldBegin(MY_IMPERSONATION_LEVEL1_FIELD_DESC);
        struct.myImpersonationLevel1.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.myAccountForWhichLogonFailed1 != null) {
        oprot.writeFieldBegin(MY_ACCOUNT_FOR_WHICH_LOGON_FAILED1_FIELD_DESC);
        struct.myAccountForWhichLogonFailed1.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.myFailureInformation1 != null) {
        oprot.writeFieldBegin(MY_FAILURE_INFORMATION1_FIELD_DESC);
        struct.myFailureInformation1.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.myNewLogon1 != null) {
        oprot.writeFieldBegin(MY_NEW_LOGON1_FIELD_DESC);
        struct.myNewLogon1.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.myDetailedAuthenticationInformation1 != null) {
        oprot.writeFieldBegin(MY_DETAILED_AUTHENTICATION_INFORMATION1_FIELD_DESC);
        struct.myDetailedAuthenticationInformation1.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.myTimeStamp1 != null) {
        oprot.writeFieldBegin(MY_TIME_STAMP1_FIELD_DESC);
        struct.myTimeStamp1.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.mac != null) {
        oprot.writeFieldBegin(MAC_FIELD_DESC);
        oprot.writeString(struct.mac);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class myLogStructureTupleSchemeFactory implements SchemeFactory {
    public myLogStructureTupleScheme getScheme() {
      return new myLogStructureTupleScheme();
    }
  }

  private static class myLogStructureTupleScheme extends TupleScheme<myLogStructure> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, myLogStructure struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMessage()) {
        optionals.set(0);
      }
      if (struct.isSetLevelMessageString()) {
        optionals.set(1);
      }
      if (struct.isSetTaskMessageString()) {
        optionals.set(2);
      }
      if (struct.isSetOpCodeMessageString()) {
        optionals.set(3);
      }
      if (struct.isSetChannelMessageString()) {
        optionals.set(4);
      }
      if (struct.isSetProviderMessageString()) {
        optionals.set(5);
      }
      if (struct.isSetKeywords()) {
        optionals.set(6);
      }
      if (struct.isSetExecutionProcessID()) {
        optionals.set(7);
      }
      if (struct.isSetExecutionThreadID()) {
        optionals.set(8);
      }
      if (struct.isSetComputer()) {
        optionals.set(9);
      }
      if (struct.isSetEventID()) {
        optionals.set(10);
      }
      if (struct.isSetMySubject1()) {
        optionals.set(11);
      }
      if (struct.isSetMyProviderInformation1()) {
        optionals.set(12);
      }
      if (struct.isSetMyObject1()) {
        optionals.set(13);
      }
      if (struct.isSetMyNetworkInformation1()) {
        optionals.set(14);
      }
      if (struct.isSetMyLayerInformation1()) {
        optionals.set(15);
      }
      if (struct.isSetMyFilterInformation1()) {
        optionals.set(16);
      }
      if (struct.isSetMyChangeInformation1()) {
        optionals.set(17);
      }
      if (struct.isSetMyCalloutInformation1()) {
        optionals.set(18);
      }
      if (struct.isSetMyApplicationInformation1()) {
        optionals.set(19);
      }
      if (struct.isSetMyAccessRequestInformation1()) {
        optionals.set(20);
      }
      if (struct.isSetMyRuleInformation1()) {
        optionals.set(21);
      }
      if (struct.isSetMyErrorInformation1()) {
        optionals.set(22);
      }
      if (struct.isSetMyProcessInformation1()) {
        optionals.set(23);
      }
      if (struct.isSetMyLogonType1()) {
        optionals.set(24);
      }
      if (struct.isSetMyImpersonationLevel1()) {
        optionals.set(25);
      }
      if (struct.isSetMyAccountForWhichLogonFailed1()) {
        optionals.set(26);
      }
      if (struct.isSetMyFailureInformation1()) {
        optionals.set(27);
      }
      if (struct.isSetMyNewLogon1()) {
        optionals.set(28);
      }
      if (struct.isSetMyDetailedAuthenticationInformation1()) {
        optionals.set(29);
      }
      if (struct.isSetMyTimeStamp1()) {
        optionals.set(30);
      }
      if (struct.isSetMac()) {
        optionals.set(31);
      }
      oprot.writeBitSet(optionals, 32);
      if (struct.isSetMessage()) {
        oprot.writeString(struct.message);
      }
      if (struct.isSetLevelMessageString()) {
        oprot.writeString(struct.levelMessageString);
      }
      if (struct.isSetTaskMessageString()) {
        oprot.writeString(struct.taskMessageString);
      }
      if (struct.isSetOpCodeMessageString()) {
        oprot.writeString(struct.opCodeMessageString);
      }
      if (struct.isSetChannelMessageString()) {
        oprot.writeString(struct.channelMessageString);
      }
      if (struct.isSetProviderMessageString()) {
        oprot.writeString(struct.providerMessageString);
      }
      if (struct.isSetKeywords()) {
        oprot.writeString(struct.keywords);
      }
      if (struct.isSetExecutionProcessID()) {
        oprot.writeString(struct.executionProcessID);
      }
      if (struct.isSetExecutionThreadID()) {
        oprot.writeString(struct.executionThreadID);
      }
      if (struct.isSetComputer()) {
        oprot.writeString(struct.computer);
      }
      if (struct.isSetEventID()) {
        oprot.writeString(struct.EventID);
      }
      if (struct.isSetMySubject1()) {
        struct.mySubject1.write(oprot);
      }
      if (struct.isSetMyProviderInformation1()) {
        struct.myProviderInformation1.write(oprot);
      }
      if (struct.isSetMyObject1()) {
        struct.myObject1.write(oprot);
      }
      if (struct.isSetMyNetworkInformation1()) {
        struct.myNetworkInformation1.write(oprot);
      }
      if (struct.isSetMyLayerInformation1()) {
        struct.myLayerInformation1.write(oprot);
      }
      if (struct.isSetMyFilterInformation1()) {
        struct.myFilterInformation1.write(oprot);
      }
      if (struct.isSetMyChangeInformation1()) {
        struct.myChangeInformation1.write(oprot);
      }
      if (struct.isSetMyCalloutInformation1()) {
        struct.myCalloutInformation1.write(oprot);
      }
      if (struct.isSetMyApplicationInformation1()) {
        struct.myApplicationInformation1.write(oprot);
      }
      if (struct.isSetMyAccessRequestInformation1()) {
        struct.myAccessRequestInformation1.write(oprot);
      }
      if (struct.isSetMyRuleInformation1()) {
        struct.myRuleInformation1.write(oprot);
      }
      if (struct.isSetMyErrorInformation1()) {
        struct.myErrorInformation1.write(oprot);
      }
      if (struct.isSetMyProcessInformation1()) {
        struct.myProcessInformation1.write(oprot);
      }
      if (struct.isSetMyLogonType1()) {
        struct.myLogonType1.write(oprot);
      }
      if (struct.isSetMyImpersonationLevel1()) {
        struct.myImpersonationLevel1.write(oprot);
      }
      if (struct.isSetMyAccountForWhichLogonFailed1()) {
        struct.myAccountForWhichLogonFailed1.write(oprot);
      }
      if (struct.isSetMyFailureInformation1()) {
        struct.myFailureInformation1.write(oprot);
      }
      if (struct.isSetMyNewLogon1()) {
        struct.myNewLogon1.write(oprot);
      }
      if (struct.isSetMyDetailedAuthenticationInformation1()) {
        struct.myDetailedAuthenticationInformation1.write(oprot);
      }
      if (struct.isSetMyTimeStamp1()) {
        struct.myTimeStamp1.write(oprot);
      }
      if (struct.isSetMac()) {
        oprot.writeString(struct.mac);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, myLogStructure struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(32);
      if (incoming.get(0)) {
        struct.message = iprot.readString();
        struct.setMessageIsSet(true);
      }
      if (incoming.get(1)) {
        struct.levelMessageString = iprot.readString();
        struct.setLevelMessageStringIsSet(true);
      }
      if (incoming.get(2)) {
        struct.taskMessageString = iprot.readString();
        struct.setTaskMessageStringIsSet(true);
      }
      if (incoming.get(3)) {
        struct.opCodeMessageString = iprot.readString();
        struct.setOpCodeMessageStringIsSet(true);
      }
      if (incoming.get(4)) {
        struct.channelMessageString = iprot.readString();
        struct.setChannelMessageStringIsSet(true);
      }
      if (incoming.get(5)) {
        struct.providerMessageString = iprot.readString();
        struct.setProviderMessageStringIsSet(true);
      }
      if (incoming.get(6)) {
        struct.keywords = iprot.readString();
        struct.setKeywordsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.executionProcessID = iprot.readString();
        struct.setExecutionProcessIDIsSet(true);
      }
      if (incoming.get(8)) {
        struct.executionThreadID = iprot.readString();
        struct.setExecutionThreadIDIsSet(true);
      }
      if (incoming.get(9)) {
        struct.computer = iprot.readString();
        struct.setComputerIsSet(true);
      }
      if (incoming.get(10)) {
        struct.EventID = iprot.readString();
        struct.setEventIDIsSet(true);
      }
      if (incoming.get(11)) {
        struct.mySubject1 = new mySubject();
        struct.mySubject1.read(iprot);
        struct.setMySubject1IsSet(true);
      }
      if (incoming.get(12)) {
        struct.myProviderInformation1 = new myProviderInformation();
        struct.myProviderInformation1.read(iprot);
        struct.setMyProviderInformation1IsSet(true);
      }
      if (incoming.get(13)) {
        struct.myObject1 = new myObject();
        struct.myObject1.read(iprot);
        struct.setMyObject1IsSet(true);
      }
      if (incoming.get(14)) {
        struct.myNetworkInformation1 = new myNetworkInformation();
        struct.myNetworkInformation1.read(iprot);
        struct.setMyNetworkInformation1IsSet(true);
      }
      if (incoming.get(15)) {
        struct.myLayerInformation1 = new myLayerInformation();
        struct.myLayerInformation1.read(iprot);
        struct.setMyLayerInformation1IsSet(true);
      }
      if (incoming.get(16)) {
        struct.myFilterInformation1 = new myFilterInformation();
        struct.myFilterInformation1.read(iprot);
        struct.setMyFilterInformation1IsSet(true);
      }
      if (incoming.get(17)) {
        struct.myChangeInformation1 = new myChangeInformation();
        struct.myChangeInformation1.read(iprot);
        struct.setMyChangeInformation1IsSet(true);
      }
      if (incoming.get(18)) {
        struct.myCalloutInformation1 = new myCalloutInformation();
        struct.myCalloutInformation1.read(iprot);
        struct.setMyCalloutInformation1IsSet(true);
      }
      if (incoming.get(19)) {
        struct.myApplicationInformation1 = new myApplicationInformation();
        struct.myApplicationInformation1.read(iprot);
        struct.setMyApplicationInformation1IsSet(true);
      }
      if (incoming.get(20)) {
        struct.myAccessRequestInformation1 = new myAccessRequestInformation();
        struct.myAccessRequestInformation1.read(iprot);
        struct.setMyAccessRequestInformation1IsSet(true);
      }
      if (incoming.get(21)) {
        struct.myRuleInformation1 = new myRuleInformation();
        struct.myRuleInformation1.read(iprot);
        struct.setMyRuleInformation1IsSet(true);
      }
      if (incoming.get(22)) {
        struct.myErrorInformation1 = new myErrorInformation();
        struct.myErrorInformation1.read(iprot);
        struct.setMyErrorInformation1IsSet(true);
      }
      if (incoming.get(23)) {
        struct.myProcessInformation1 = new myProcessInformation();
        struct.myProcessInformation1.read(iprot);
        struct.setMyProcessInformation1IsSet(true);
      }
      if (incoming.get(24)) {
        struct.myLogonType1 = new myLogonType();
        struct.myLogonType1.read(iprot);
        struct.setMyLogonType1IsSet(true);
      }
      if (incoming.get(25)) {
        struct.myImpersonationLevel1 = new myImpersonationLevel();
        struct.myImpersonationLevel1.read(iprot);
        struct.setMyImpersonationLevel1IsSet(true);
      }
      if (incoming.get(26)) {
        struct.myAccountForWhichLogonFailed1 = new myAccountForWhichLogonFailed();
        struct.myAccountForWhichLogonFailed1.read(iprot);
        struct.setMyAccountForWhichLogonFailed1IsSet(true);
      }
      if (incoming.get(27)) {
        struct.myFailureInformation1 = new myFailureInformation();
        struct.myFailureInformation1.read(iprot);
        struct.setMyFailureInformation1IsSet(true);
      }
      if (incoming.get(28)) {
        struct.myNewLogon1 = new myNewLogon();
        struct.myNewLogon1.read(iprot);
        struct.setMyNewLogon1IsSet(true);
      }
      if (incoming.get(29)) {
        struct.myDetailedAuthenticationInformation1 = new myDetailedAuthenticationInformation();
        struct.myDetailedAuthenticationInformation1.read(iprot);
        struct.setMyDetailedAuthenticationInformation1IsSet(true);
      }
      if (incoming.get(30)) {
        struct.myTimeStamp1 = new myTimeStamp();
        struct.myTimeStamp1.read(iprot);
        struct.setMyTimeStamp1IsSet(true);
      }
      if (incoming.get(31)) {
        struct.mac = iprot.readString();
        struct.setMacIsSet(true);
      }
    }
  }

}

