package com.uom.cse.central_node.services;

/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-12-9")
public class ThriftAgentProcessInfo implements org.apache.thrift.TBase<ThriftAgentProcessInfo, ThriftAgentProcessInfo._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftAgentProcessInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftAgentProcessInfo");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PACKAGE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("packageName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField RAM_USAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("ramUsage", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CPU_USAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("cpuUsage", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SENT_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("sentData", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField RECEIVE_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("receiveData", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ThriftAgentProcessInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ThriftAgentProcessInfoTupleSchemeFactory());
  }

  public String name; // required
  public String packageName; // required
  public String ramUsage; // required
  public String cpuUsage; // required
  public String sentData; // required
  public String receiveData; // required
  public String pid; // required
  public String type; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    PACKAGE_NAME((short)2, "packageName"),
    RAM_USAGE((short)3, "ramUsage"),
    CPU_USAGE((short)4, "cpuUsage"),
    SENT_DATA((short)5, "sentData"),
    RECEIVE_DATA((short)6, "receiveData"),
    PID((short)7, "pid"),
    TYPE((short)8, "type");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // PACKAGE_NAME
          return PACKAGE_NAME;
        case 3: // RAM_USAGE
          return RAM_USAGE;
        case 4: // CPU_USAGE
          return CPU_USAGE;
        case 5: // SENT_DATA
          return SENT_DATA;
        case 6: // RECEIVE_DATA
          return RECEIVE_DATA;
        case 7: // PID
          return PID;
        case 8: // TYPE
          return TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PACKAGE_NAME, new org.apache.thrift.meta_data.FieldMetaData("packageName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RAM_USAGE, new org.apache.thrift.meta_data.FieldMetaData("ramUsage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CPU_USAGE, new org.apache.thrift.meta_data.FieldMetaData("cpuUsage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SENT_DATA, new org.apache.thrift.meta_data.FieldMetaData("sentData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECEIVE_DATA, new org.apache.thrift.meta_data.FieldMetaData("receiveData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftAgentProcessInfo.class, metaDataMap);
  }

  public ThriftAgentProcessInfo() {
  }

  public ThriftAgentProcessInfo(
    String name,
    String packageName,
    String ramUsage,
    String cpuUsage,
    String sentData,
    String receiveData,
    String pid,
    String type)
  {
    this();
    this.name = name;
    this.packageName = packageName;
    this.ramUsage = ramUsage;
    this.cpuUsage = cpuUsage;
    this.sentData = sentData;
    this.receiveData = receiveData;
    this.pid = pid;
    this.type = type;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftAgentProcessInfo(ThriftAgentProcessInfo other) {
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetPackageName()) {
      this.packageName = other.packageName;
    }
    if (other.isSetRamUsage()) {
      this.ramUsage = other.ramUsage;
    }
    if (other.isSetCpuUsage()) {
      this.cpuUsage = other.cpuUsage;
    }
    if (other.isSetSentData()) {
      this.sentData = other.sentData;
    }
    if (other.isSetReceiveData()) {
      this.receiveData = other.receiveData;
    }
    if (other.isSetPid()) {
      this.pid = other.pid;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
  }

  public ThriftAgentProcessInfo deepCopy() {
    return new ThriftAgentProcessInfo(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.packageName = null;
    this.ramUsage = null;
    this.cpuUsage = null;
    this.sentData = null;
    this.receiveData = null;
    this.pid = null;
    this.type = null;
  }

  public String getName() {
    return this.name;
  }

  public ThriftAgentProcessInfo setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getPackageName() {
    return this.packageName;
  }

  public ThriftAgentProcessInfo setPackageName(String packageName) {
    this.packageName = packageName;
    return this;
  }

  public void unsetPackageName() {
    this.packageName = null;
  }

  /** Returns true if field packageName is set (has been assigned a value) and false otherwise */
  public boolean isSetPackageName() {
    return this.packageName != null;
  }

  public void setPackageNameIsSet(boolean value) {
    if (!value) {
      this.packageName = null;
    }
  }

  public String getRamUsage() {
    return this.ramUsage;
  }

  public ThriftAgentProcessInfo setRamUsage(String ramUsage) {
    this.ramUsage = ramUsage;
    return this;
  }

  public void unsetRamUsage() {
    this.ramUsage = null;
  }

  /** Returns true if field ramUsage is set (has been assigned a value) and false otherwise */
  public boolean isSetRamUsage() {
    return this.ramUsage != null;
  }

  public void setRamUsageIsSet(boolean value) {
    if (!value) {
      this.ramUsage = null;
    }
  }

  public String getCpuUsage() {
    return this.cpuUsage;
  }

  public ThriftAgentProcessInfo setCpuUsage(String cpuUsage) {
    this.cpuUsage = cpuUsage;
    return this;
  }

  public void unsetCpuUsage() {
    this.cpuUsage = null;
  }

  /** Returns true if field cpuUsage is set (has been assigned a value) and false otherwise */
  public boolean isSetCpuUsage() {
    return this.cpuUsage != null;
  }

  public void setCpuUsageIsSet(boolean value) {
    if (!value) {
      this.cpuUsage = null;
    }
  }

  public String getSentData() {
    return this.sentData;
  }

  public ThriftAgentProcessInfo setSentData(String sentData) {
    this.sentData = sentData;
    return this;
  }

  public void unsetSentData() {
    this.sentData = null;
  }

  /** Returns true if field sentData is set (has been assigned a value) and false otherwise */
  public boolean isSetSentData() {
    return this.sentData != null;
  }

  public void setSentDataIsSet(boolean value) {
    if (!value) {
      this.sentData = null;
    }
  }

  public String getReceiveData() {
    return this.receiveData;
  }

  public ThriftAgentProcessInfo setReceiveData(String receiveData) {
    this.receiveData = receiveData;
    return this;
  }

  public void unsetReceiveData() {
    this.receiveData = null;
  }

  /** Returns true if field receiveData is set (has been assigned a value) and false otherwise */
  public boolean isSetReceiveData() {
    return this.receiveData != null;
  }

  public void setReceiveDataIsSet(boolean value) {
    if (!value) {
      this.receiveData = null;
    }
  }

  public String getPid() {
    return this.pid;
  }

  public ThriftAgentProcessInfo setPid(String pid) {
    this.pid = pid;
    return this;
  }

  public void unsetPid() {
    this.pid = null;
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return this.pid != null;
  }

  public void setPidIsSet(boolean value) {
    if (!value) {
      this.pid = null;
    }
  }

  public String getType() {
    return this.type;
  }

  public ThriftAgentProcessInfo setType(String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case PACKAGE_NAME:
      if (value == null) {
        unsetPackageName();
      } else {
        setPackageName((String)value);
      }
      break;

    case RAM_USAGE:
      if (value == null) {
        unsetRamUsage();
      } else {
        setRamUsage((String)value);
      }
      break;

    case CPU_USAGE:
      if (value == null) {
        unsetCpuUsage();
      } else {
        setCpuUsage((String)value);
      }
      break;

    case SENT_DATA:
      if (value == null) {
        unsetSentData();
      } else {
        setSentData((String)value);
      }
      break;

    case RECEIVE_DATA:
      if (value == null) {
        unsetReceiveData();
      } else {
        setReceiveData((String)value);
      }
      break;

    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case PACKAGE_NAME:
      return getPackageName();

    case RAM_USAGE:
      return getRamUsage();

    case CPU_USAGE:
      return getCpuUsage();

    case SENT_DATA:
      return getSentData();

    case RECEIVE_DATA:
      return getReceiveData();

    case PID:
      return getPid();

    case TYPE:
      return getType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case PACKAGE_NAME:
      return isSetPackageName();
    case RAM_USAGE:
      return isSetRamUsage();
    case CPU_USAGE:
      return isSetCpuUsage();
    case SENT_DATA:
      return isSetSentData();
    case RECEIVE_DATA:
      return isSetReceiveData();
    case PID:
      return isSetPid();
    case TYPE:
      return isSetType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftAgentProcessInfo)
      return this.equals((ThriftAgentProcessInfo)that);
    return false;
  }

  public boolean equals(ThriftAgentProcessInfo that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_packageName = true && this.isSetPackageName();
    boolean that_present_packageName = true && that.isSetPackageName();
    if (this_present_packageName || that_present_packageName) {
      if (!(this_present_packageName && that_present_packageName))
        return false;
      if (!this.packageName.equals(that.packageName))
        return false;
    }

    boolean this_present_ramUsage = true && this.isSetRamUsage();
    boolean that_present_ramUsage = true && that.isSetRamUsage();
    if (this_present_ramUsage || that_present_ramUsage) {
      if (!(this_present_ramUsage && that_present_ramUsage))
        return false;
      if (!this.ramUsage.equals(that.ramUsage))
        return false;
    }

    boolean this_present_cpuUsage = true && this.isSetCpuUsage();
    boolean that_present_cpuUsage = true && that.isSetCpuUsage();
    if (this_present_cpuUsage || that_present_cpuUsage) {
      if (!(this_present_cpuUsage && that_present_cpuUsage))
        return false;
      if (!this.cpuUsage.equals(that.cpuUsage))
        return false;
    }

    boolean this_present_sentData = true && this.isSetSentData();
    boolean that_present_sentData = true && that.isSetSentData();
    if (this_present_sentData || that_present_sentData) {
      if (!(this_present_sentData && that_present_sentData))
        return false;
      if (!this.sentData.equals(that.sentData))
        return false;
    }

    boolean this_present_receiveData = true && this.isSetReceiveData();
    boolean that_present_receiveData = true && that.isSetReceiveData();
    if (this_present_receiveData || that_present_receiveData) {
      if (!(this_present_receiveData && that_present_receiveData))
        return false;
      if (!this.receiveData.equals(that.receiveData))
        return false;
    }

    boolean this_present_pid = true && this.isSetPid();
    boolean that_present_pid = true && that.isSetPid();
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (!this.pid.equals(that.pid))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_packageName = true && (isSetPackageName());
    list.add(present_packageName);
    if (present_packageName)
      list.add(packageName);

    boolean present_ramUsage = true && (isSetRamUsage());
    list.add(present_ramUsage);
    if (present_ramUsage)
      list.add(ramUsage);

    boolean present_cpuUsage = true && (isSetCpuUsage());
    list.add(present_cpuUsage);
    if (present_cpuUsage)
      list.add(cpuUsage);

    boolean present_sentData = true && (isSetSentData());
    list.add(present_sentData);
    if (present_sentData)
      list.add(sentData);

    boolean present_receiveData = true && (isSetReceiveData());
    list.add(present_receiveData);
    if (present_receiveData)
      list.add(receiveData);

    boolean present_pid = true && (isSetPid());
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type);

    return list.hashCode();
  }

  @Override
  public int compareTo(ThriftAgentProcessInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPackageName()).compareTo(other.isSetPackageName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPackageName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.packageName, other.packageName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRamUsage()).compareTo(other.isSetRamUsage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRamUsage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ramUsage, other.ramUsage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpuUsage()).compareTo(other.isSetCpuUsage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpuUsage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpuUsage, other.cpuUsage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSentData()).compareTo(other.isSetSentData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSentData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sentData, other.sentData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceiveData()).compareTo(other.isSetReceiveData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceiveData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receiveData, other.receiveData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThriftAgentProcessInfo(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("packageName:");
    if (this.packageName == null) {
      sb.append("null");
    } else {
      sb.append(this.packageName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ramUsage:");
    if (this.ramUsage == null) {
      sb.append("null");
    } else {
      sb.append(this.ramUsage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cpuUsage:");
    if (this.cpuUsage == null) {
      sb.append("null");
    } else {
      sb.append(this.cpuUsage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sentData:");
    if (this.sentData == null) {
      sb.append("null");
    } else {
      sb.append(this.sentData);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("receiveData:");
    if (this.receiveData == null) {
      sb.append("null");
    } else {
      sb.append(this.receiveData);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pid:");
    if (this.pid == null) {
      sb.append("null");
    } else {
      sb.append(this.pid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftAgentProcessInfoStandardSchemeFactory implements SchemeFactory {
    public ThriftAgentProcessInfoStandardScheme getScheme() {
      return new ThriftAgentProcessInfoStandardScheme();
    }
  }

  private static class ThriftAgentProcessInfoStandardScheme extends StandardScheme<ThriftAgentProcessInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftAgentProcessInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PACKAGE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.packageName = iprot.readString();
              struct.setPackageNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RAM_USAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ramUsage = iprot.readString();
              struct.setRamUsageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CPU_USAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cpuUsage = iprot.readString();
              struct.setCpuUsageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SENT_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sentData = iprot.readString();
              struct.setSentDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RECEIVE_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.receiveData = iprot.readString();
              struct.setReceiveDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pid = iprot.readString();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftAgentProcessInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.packageName != null) {
        oprot.writeFieldBegin(PACKAGE_NAME_FIELD_DESC);
        oprot.writeString(struct.packageName);
        oprot.writeFieldEnd();
      }
      if (struct.ramUsage != null) {
        oprot.writeFieldBegin(RAM_USAGE_FIELD_DESC);
        oprot.writeString(struct.ramUsage);
        oprot.writeFieldEnd();
      }
      if (struct.cpuUsage != null) {
        oprot.writeFieldBegin(CPU_USAGE_FIELD_DESC);
        oprot.writeString(struct.cpuUsage);
        oprot.writeFieldEnd();
      }
      if (struct.sentData != null) {
        oprot.writeFieldBegin(SENT_DATA_FIELD_DESC);
        oprot.writeString(struct.sentData);
        oprot.writeFieldEnd();
      }
      if (struct.receiveData != null) {
        oprot.writeFieldBegin(RECEIVE_DATA_FIELD_DESC);
        oprot.writeString(struct.receiveData);
        oprot.writeFieldEnd();
      }
      if (struct.pid != null) {
        oprot.writeFieldBegin(PID_FIELD_DESC);
        oprot.writeString(struct.pid);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeString(struct.type);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftAgentProcessInfoTupleSchemeFactory implements SchemeFactory {
    public ThriftAgentProcessInfoTupleScheme getScheme() {
      return new ThriftAgentProcessInfoTupleScheme();
    }
  }

  private static class ThriftAgentProcessInfoTupleScheme extends TupleScheme<ThriftAgentProcessInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftAgentProcessInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetPackageName()) {
        optionals.set(1);
      }
      if (struct.isSetRamUsage()) {
        optionals.set(2);
      }
      if (struct.isSetCpuUsage()) {
        optionals.set(3);
      }
      if (struct.isSetSentData()) {
        optionals.set(4);
      }
      if (struct.isSetReceiveData()) {
        optionals.set(5);
      }
      if (struct.isSetPid()) {
        optionals.set(6);
      }
      if (struct.isSetType()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetPackageName()) {
        oprot.writeString(struct.packageName);
      }
      if (struct.isSetRamUsage()) {
        oprot.writeString(struct.ramUsage);
      }
      if (struct.isSetCpuUsage()) {
        oprot.writeString(struct.cpuUsage);
      }
      if (struct.isSetSentData()) {
        oprot.writeString(struct.sentData);
      }
      if (struct.isSetReceiveData()) {
        oprot.writeString(struct.receiveData);
      }
      if (struct.isSetPid()) {
        oprot.writeString(struct.pid);
      }
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftAgentProcessInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.packageName = iprot.readString();
        struct.setPackageNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.ramUsage = iprot.readString();
        struct.setRamUsageIsSet(true);
      }
      if (incoming.get(3)) {
        struct.cpuUsage = iprot.readString();
        struct.setCpuUsageIsSet(true);
      }
      if (incoming.get(4)) {
        struct.sentData = iprot.readString();
        struct.setSentDataIsSet(true);
      }
      if (incoming.get(5)) {
        struct.receiveData = iprot.readString();
        struct.setReceiveDataIsSet(true);
      }
      if (incoming.get(6)) {
        struct.pid = iprot.readString();
        struct.setPidIsSet(true);
      }
      if (incoming.get(7)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
    }
  }

}

