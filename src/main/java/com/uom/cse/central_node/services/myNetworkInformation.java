package com.uom.cse.central_node.services;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-12-30")
public class myNetworkInformation implements org.apache.thrift.TBase<myNetworkInformation, myNetworkInformation._Fields>, java.io.Serializable, Cloneable, Comparable<myNetworkInformation> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("myNetworkInformation");

  private static final org.apache.thrift.protocol.TField DIRECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("Direction", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SOURCE__ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("Source_Address", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SOURCE__PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("Source_Port", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DESTINATION__ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("Destination_Address", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DESTINATION__PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("Destination_Port", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PROTOCOL_FIELD_DESC = new org.apache.thrift.protocol.TField("Protocol", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField WORKSTATION__NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("Workstation_Name", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new myNetworkInformationStandardSchemeFactory());
    schemes.put(TupleScheme.class, new myNetworkInformationTupleSchemeFactory());
  }

  public String Direction; // required
  public String Source_Address; // required
  public String Source_Port; // required
  public String Destination_Address; // required
  public String Destination_Port; // required
  public String Protocol; // required
  public String Workstation_Name; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DIRECTION((short)1, "Direction"),
    SOURCE__ADDRESS((short)2, "Source_Address"),
    SOURCE__PORT((short)3, "Source_Port"),
    DESTINATION__ADDRESS((short)4, "Destination_Address"),
    DESTINATION__PORT((short)5, "Destination_Port"),
    PROTOCOL((short)6, "Protocol"),
    WORKSTATION__NAME((short)7, "Workstation_Name");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DIRECTION
          return DIRECTION;
        case 2: // SOURCE__ADDRESS
          return SOURCE__ADDRESS;
        case 3: // SOURCE__PORT
          return SOURCE__PORT;
        case 4: // DESTINATION__ADDRESS
          return DESTINATION__ADDRESS;
        case 5: // DESTINATION__PORT
          return DESTINATION__PORT;
        case 6: // PROTOCOL
          return PROTOCOL;
        case 7: // WORKSTATION__NAME
          return WORKSTATION__NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DIRECTION, new org.apache.thrift.meta_data.FieldMetaData("Direction", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SOURCE__ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("Source_Address", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SOURCE__PORT, new org.apache.thrift.meta_data.FieldMetaData("Source_Port", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESTINATION__ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("Destination_Address", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESTINATION__PORT, new org.apache.thrift.meta_data.FieldMetaData("Destination_Port", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROTOCOL, new org.apache.thrift.meta_data.FieldMetaData("Protocol", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WORKSTATION__NAME, new org.apache.thrift.meta_data.FieldMetaData("Workstation_Name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(myNetworkInformation.class, metaDataMap);
  }

  public myNetworkInformation() {
  }

  public myNetworkInformation(
    String Direction,
    String Source_Address,
    String Source_Port,
    String Destination_Address,
    String Destination_Port,
    String Protocol,
    String Workstation_Name)
  {
    this();
    this.Direction = Direction;
    this.Source_Address = Source_Address;
    this.Source_Port = Source_Port;
    this.Destination_Address = Destination_Address;
    this.Destination_Port = Destination_Port;
    this.Protocol = Protocol;
    this.Workstation_Name = Workstation_Name;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public myNetworkInformation(myNetworkInformation other) {
    if (other.isSetDirection()) {
      this.Direction = other.Direction;
    }
    if (other.isSetSource_Address()) {
      this.Source_Address = other.Source_Address;
    }
    if (other.isSetSource_Port()) {
      this.Source_Port = other.Source_Port;
    }
    if (other.isSetDestination_Address()) {
      this.Destination_Address = other.Destination_Address;
    }
    if (other.isSetDestination_Port()) {
      this.Destination_Port = other.Destination_Port;
    }
    if (other.isSetProtocol()) {
      this.Protocol = other.Protocol;
    }
    if (other.isSetWorkstation_Name()) {
      this.Workstation_Name = other.Workstation_Name;
    }
  }

  public myNetworkInformation deepCopy() {
    return new myNetworkInformation(this);
  }

  @Override
  public void clear() {
    this.Direction = null;
    this.Source_Address = null;
    this.Source_Port = null;
    this.Destination_Address = null;
    this.Destination_Port = null;
    this.Protocol = null;
    this.Workstation_Name = null;
  }

  public String getDirection() {
    return this.Direction;
  }

  public myNetworkInformation setDirection(String Direction) {
    this.Direction = Direction;
    return this;
  }

  public void unsetDirection() {
    this.Direction = null;
  }

  /** Returns true if field Direction is set (has been assigned a value) and false otherwise */
  public boolean isSetDirection() {
    return this.Direction != null;
  }

  public void setDirectionIsSet(boolean value) {
    if (!value) {
      this.Direction = null;
    }
  }

  public String getSource_Address() {
    return this.Source_Address;
  }

  public myNetworkInformation setSource_Address(String Source_Address) {
    this.Source_Address = Source_Address;
    return this;
  }

  public void unsetSource_Address() {
    this.Source_Address = null;
  }

  /** Returns true if field Source_Address is set (has been assigned a value) and false otherwise */
  public boolean isSetSource_Address() {
    return this.Source_Address != null;
  }

  public void setSource_AddressIsSet(boolean value) {
    if (!value) {
      this.Source_Address = null;
    }
  }

  public String getSource_Port() {
    return this.Source_Port;
  }

  public myNetworkInformation setSource_Port(String Source_Port) {
    this.Source_Port = Source_Port;
    return this;
  }

  public void unsetSource_Port() {
    this.Source_Port = null;
  }

  /** Returns true if field Source_Port is set (has been assigned a value) and false otherwise */
  public boolean isSetSource_Port() {
    return this.Source_Port != null;
  }

  public void setSource_PortIsSet(boolean value) {
    if (!value) {
      this.Source_Port = null;
    }
  }

  public String getDestination_Address() {
    return this.Destination_Address;
  }

  public myNetworkInformation setDestination_Address(String Destination_Address) {
    this.Destination_Address = Destination_Address;
    return this;
  }

  public void unsetDestination_Address() {
    this.Destination_Address = null;
  }

  /** Returns true if field Destination_Address is set (has been assigned a value) and false otherwise */
  public boolean isSetDestination_Address() {
    return this.Destination_Address != null;
  }

  public void setDestination_AddressIsSet(boolean value) {
    if (!value) {
      this.Destination_Address = null;
    }
  }

  public String getDestination_Port() {
    return this.Destination_Port;
  }

  public myNetworkInformation setDestination_Port(String Destination_Port) {
    this.Destination_Port = Destination_Port;
    return this;
  }

  public void unsetDestination_Port() {
    this.Destination_Port = null;
  }

  /** Returns true if field Destination_Port is set (has been assigned a value) and false otherwise */
  public boolean isSetDestination_Port() {
    return this.Destination_Port != null;
  }

  public void setDestination_PortIsSet(boolean value) {
    if (!value) {
      this.Destination_Port = null;
    }
  }

  public String getProtocol() {
    return this.Protocol;
  }

  public myNetworkInformation setProtocol(String Protocol) {
    this.Protocol = Protocol;
    return this;
  }

  public void unsetProtocol() {
    this.Protocol = null;
  }

  /** Returns true if field Protocol is set (has been assigned a value) and false otherwise */
  public boolean isSetProtocol() {
    return this.Protocol != null;
  }

  public void setProtocolIsSet(boolean value) {
    if (!value) {
      this.Protocol = null;
    }
  }

  public String getWorkstation_Name() {
    return this.Workstation_Name;
  }

  public myNetworkInformation setWorkstation_Name(String Workstation_Name) {
    this.Workstation_Name = Workstation_Name;
    return this;
  }

  public void unsetWorkstation_Name() {
    this.Workstation_Name = null;
  }

  /** Returns true if field Workstation_Name is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkstation_Name() {
    return this.Workstation_Name != null;
  }

  public void setWorkstation_NameIsSet(boolean value) {
    if (!value) {
      this.Workstation_Name = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DIRECTION:
      if (value == null) {
        unsetDirection();
      } else {
        setDirection((String)value);
      }
      break;

    case SOURCE__ADDRESS:
      if (value == null) {
        unsetSource_Address();
      } else {
        setSource_Address((String)value);
      }
      break;

    case SOURCE__PORT:
      if (value == null) {
        unsetSource_Port();
      } else {
        setSource_Port((String)value);
      }
      break;

    case DESTINATION__ADDRESS:
      if (value == null) {
        unsetDestination_Address();
      } else {
        setDestination_Address((String)value);
      }
      break;

    case DESTINATION__PORT:
      if (value == null) {
        unsetDestination_Port();
      } else {
        setDestination_Port((String)value);
      }
      break;

    case PROTOCOL:
      if (value == null) {
        unsetProtocol();
      } else {
        setProtocol((String)value);
      }
      break;

    case WORKSTATION__NAME:
      if (value == null) {
        unsetWorkstation_Name();
      } else {
        setWorkstation_Name((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DIRECTION:
      return getDirection();

    case SOURCE__ADDRESS:
      return getSource_Address();

    case SOURCE__PORT:
      return getSource_Port();

    case DESTINATION__ADDRESS:
      return getDestination_Address();

    case DESTINATION__PORT:
      return getDestination_Port();

    case PROTOCOL:
      return getProtocol();

    case WORKSTATION__NAME:
      return getWorkstation_Name();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DIRECTION:
      return isSetDirection();
    case SOURCE__ADDRESS:
      return isSetSource_Address();
    case SOURCE__PORT:
      return isSetSource_Port();
    case DESTINATION__ADDRESS:
      return isSetDestination_Address();
    case DESTINATION__PORT:
      return isSetDestination_Port();
    case PROTOCOL:
      return isSetProtocol();
    case WORKSTATION__NAME:
      return isSetWorkstation_Name();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof myNetworkInformation)
      return this.equals((myNetworkInformation)that);
    return false;
  }

  public boolean equals(myNetworkInformation that) {
    if (that == null)
      return false;

    boolean this_present_Direction = true && this.isSetDirection();
    boolean that_present_Direction = true && that.isSetDirection();
    if (this_present_Direction || that_present_Direction) {
      if (!(this_present_Direction && that_present_Direction))
        return false;
      if (!this.Direction.equals(that.Direction))
        return false;
    }

    boolean this_present_Source_Address = true && this.isSetSource_Address();
    boolean that_present_Source_Address = true && that.isSetSource_Address();
    if (this_present_Source_Address || that_present_Source_Address) {
      if (!(this_present_Source_Address && that_present_Source_Address))
        return false;
      if (!this.Source_Address.equals(that.Source_Address))
        return false;
    }

    boolean this_present_Source_Port = true && this.isSetSource_Port();
    boolean that_present_Source_Port = true && that.isSetSource_Port();
    if (this_present_Source_Port || that_present_Source_Port) {
      if (!(this_present_Source_Port && that_present_Source_Port))
        return false;
      if (!this.Source_Port.equals(that.Source_Port))
        return false;
    }

    boolean this_present_Destination_Address = true && this.isSetDestination_Address();
    boolean that_present_Destination_Address = true && that.isSetDestination_Address();
    if (this_present_Destination_Address || that_present_Destination_Address) {
      if (!(this_present_Destination_Address && that_present_Destination_Address))
        return false;
      if (!this.Destination_Address.equals(that.Destination_Address))
        return false;
    }

    boolean this_present_Destination_Port = true && this.isSetDestination_Port();
    boolean that_present_Destination_Port = true && that.isSetDestination_Port();
    if (this_present_Destination_Port || that_present_Destination_Port) {
      if (!(this_present_Destination_Port && that_present_Destination_Port))
        return false;
      if (!this.Destination_Port.equals(that.Destination_Port))
        return false;
    }

    boolean this_present_Protocol = true && this.isSetProtocol();
    boolean that_present_Protocol = true && that.isSetProtocol();
    if (this_present_Protocol || that_present_Protocol) {
      if (!(this_present_Protocol && that_present_Protocol))
        return false;
      if (!this.Protocol.equals(that.Protocol))
        return false;
    }

    boolean this_present_Workstation_Name = true && this.isSetWorkstation_Name();
    boolean that_present_Workstation_Name = true && that.isSetWorkstation_Name();
    if (this_present_Workstation_Name || that_present_Workstation_Name) {
      if (!(this_present_Workstation_Name && that_present_Workstation_Name))
        return false;
      if (!this.Workstation_Name.equals(that.Workstation_Name))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_Direction = true && (isSetDirection());
    list.add(present_Direction);
    if (present_Direction)
      list.add(Direction);

    boolean present_Source_Address = true && (isSetSource_Address());
    list.add(present_Source_Address);
    if (present_Source_Address)
      list.add(Source_Address);

    boolean present_Source_Port = true && (isSetSource_Port());
    list.add(present_Source_Port);
    if (present_Source_Port)
      list.add(Source_Port);

    boolean present_Destination_Address = true && (isSetDestination_Address());
    list.add(present_Destination_Address);
    if (present_Destination_Address)
      list.add(Destination_Address);

    boolean present_Destination_Port = true && (isSetDestination_Port());
    list.add(present_Destination_Port);
    if (present_Destination_Port)
      list.add(Destination_Port);

    boolean present_Protocol = true && (isSetProtocol());
    list.add(present_Protocol);
    if (present_Protocol)
      list.add(Protocol);

    boolean present_Workstation_Name = true && (isSetWorkstation_Name());
    list.add(present_Workstation_Name);
    if (present_Workstation_Name)
      list.add(Workstation_Name);

    return list.hashCode();
  }

  @Override
  public int compareTo(myNetworkInformation other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDirection()).compareTo(other.isSetDirection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDirection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Direction, other.Direction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSource_Address()).compareTo(other.isSetSource_Address());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource_Address()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Source_Address, other.Source_Address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSource_Port()).compareTo(other.isSetSource_Port());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource_Port()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Source_Port, other.Source_Port);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDestination_Address()).compareTo(other.isSetDestination_Address());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDestination_Address()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Destination_Address, other.Destination_Address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDestination_Port()).compareTo(other.isSetDestination_Port());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDestination_Port()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Destination_Port, other.Destination_Port);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProtocol()).compareTo(other.isSetProtocol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProtocol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Protocol, other.Protocol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorkstation_Name()).compareTo(other.isSetWorkstation_Name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkstation_Name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Workstation_Name, other.Workstation_Name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("myNetworkInformation(");
    boolean first = true;

    sb.append("Direction:");
    if (this.Direction == null) {
      sb.append("null");
    } else {
      sb.append(this.Direction);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Source_Address:");
    if (this.Source_Address == null) {
      sb.append("null");
    } else {
      sb.append(this.Source_Address);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Source_Port:");
    if (this.Source_Port == null) {
      sb.append("null");
    } else {
      sb.append(this.Source_Port);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Destination_Address:");
    if (this.Destination_Address == null) {
      sb.append("null");
    } else {
      sb.append(this.Destination_Address);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Destination_Port:");
    if (this.Destination_Port == null) {
      sb.append("null");
    } else {
      sb.append(this.Destination_Port);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Protocol:");
    if (this.Protocol == null) {
      sb.append("null");
    } else {
      sb.append(this.Protocol);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Workstation_Name:");
    if (this.Workstation_Name == null) {
      sb.append("null");
    } else {
      sb.append(this.Workstation_Name);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class myNetworkInformationStandardSchemeFactory implements SchemeFactory {
    public myNetworkInformationStandardScheme getScheme() {
      return new myNetworkInformationStandardScheme();
    }
  }

  private static class myNetworkInformationStandardScheme extends StandardScheme<myNetworkInformation> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, myNetworkInformation struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DIRECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Direction = iprot.readString();
              struct.setDirectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SOURCE__ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Source_Address = iprot.readString();
              struct.setSource_AddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SOURCE__PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Source_Port = iprot.readString();
              struct.setSource_PortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DESTINATION__ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Destination_Address = iprot.readString();
              struct.setDestination_AddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DESTINATION__PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Destination_Port = iprot.readString();
              struct.setDestination_PortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PROTOCOL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Protocol = iprot.readString();
              struct.setProtocolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // WORKSTATION__NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Workstation_Name = iprot.readString();
              struct.setWorkstation_NameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, myNetworkInformation struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.Direction != null) {
        oprot.writeFieldBegin(DIRECTION_FIELD_DESC);
        oprot.writeString(struct.Direction);
        oprot.writeFieldEnd();
      }
      if (struct.Source_Address != null) {
        oprot.writeFieldBegin(SOURCE__ADDRESS_FIELD_DESC);
        oprot.writeString(struct.Source_Address);
        oprot.writeFieldEnd();
      }
      if (struct.Source_Port != null) {
        oprot.writeFieldBegin(SOURCE__PORT_FIELD_DESC);
        oprot.writeString(struct.Source_Port);
        oprot.writeFieldEnd();
      }
      if (struct.Destination_Address != null) {
        oprot.writeFieldBegin(DESTINATION__ADDRESS_FIELD_DESC);
        oprot.writeString(struct.Destination_Address);
        oprot.writeFieldEnd();
      }
      if (struct.Destination_Port != null) {
        oprot.writeFieldBegin(DESTINATION__PORT_FIELD_DESC);
        oprot.writeString(struct.Destination_Port);
        oprot.writeFieldEnd();
      }
      if (struct.Protocol != null) {
        oprot.writeFieldBegin(PROTOCOL_FIELD_DESC);
        oprot.writeString(struct.Protocol);
        oprot.writeFieldEnd();
      }
      if (struct.Workstation_Name != null) {
        oprot.writeFieldBegin(WORKSTATION__NAME_FIELD_DESC);
        oprot.writeString(struct.Workstation_Name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class myNetworkInformationTupleSchemeFactory implements SchemeFactory {
    public myNetworkInformationTupleScheme getScheme() {
      return new myNetworkInformationTupleScheme();
    }
  }

  private static class myNetworkInformationTupleScheme extends TupleScheme<myNetworkInformation> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, myNetworkInformation struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDirection()) {
        optionals.set(0);
      }
      if (struct.isSetSource_Address()) {
        optionals.set(1);
      }
      if (struct.isSetSource_Port()) {
        optionals.set(2);
      }
      if (struct.isSetDestination_Address()) {
        optionals.set(3);
      }
      if (struct.isSetDestination_Port()) {
        optionals.set(4);
      }
      if (struct.isSetProtocol()) {
        optionals.set(5);
      }
      if (struct.isSetWorkstation_Name()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetDirection()) {
        oprot.writeString(struct.Direction);
      }
      if (struct.isSetSource_Address()) {
        oprot.writeString(struct.Source_Address);
      }
      if (struct.isSetSource_Port()) {
        oprot.writeString(struct.Source_Port);
      }
      if (struct.isSetDestination_Address()) {
        oprot.writeString(struct.Destination_Address);
      }
      if (struct.isSetDestination_Port()) {
        oprot.writeString(struct.Destination_Port);
      }
      if (struct.isSetProtocol()) {
        oprot.writeString(struct.Protocol);
      }
      if (struct.isSetWorkstation_Name()) {
        oprot.writeString(struct.Workstation_Name);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, myNetworkInformation struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.Direction = iprot.readString();
        struct.setDirectionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.Source_Address = iprot.readString();
        struct.setSource_AddressIsSet(true);
      }
      if (incoming.get(2)) {
        struct.Source_Port = iprot.readString();
        struct.setSource_PortIsSet(true);
      }
      if (incoming.get(3)) {
        struct.Destination_Address = iprot.readString();
        struct.setDestination_AddressIsSet(true);
      }
      if (incoming.get(4)) {
        struct.Destination_Port = iprot.readString();
        struct.setDestination_PortIsSet(true);
      }
      if (incoming.get(5)) {
        struct.Protocol = iprot.readString();
        struct.setProtocolIsSet(true);
      }
      if (incoming.get(6)) {
        struct.Workstation_Name = iprot.readString();
        struct.setWorkstation_NameIsSet(true);
      }
    }
  }

}

