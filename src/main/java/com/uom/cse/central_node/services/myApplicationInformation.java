/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.uom.cse.central_node.services;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-1-25")
public class myApplicationInformation implements org.apache.thrift.TBase<myApplicationInformation, myApplicationInformation._Fields>, java.io.Serializable, Cloneable, Comparable<myApplicationInformation> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("myApplicationInformation");

  private static final org.apache.thrift.protocol.TField APPLICATION__PROCESS__ID_FIELD_DESC = new org.apache.thrift.protocol.TField("Application_Process_ID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField APPLICATION__NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("Application_Name", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new myApplicationInformationStandardSchemeFactory());
    schemes.put(TupleScheme.class, new myApplicationInformationTupleSchemeFactory());
  }

  public String Application_Process_ID; // required
  public String Application_Name; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    APPLICATION__PROCESS__ID((short)1, "Application_Process_ID"),
    APPLICATION__NAME((short)2, "Application_Name");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // APPLICATION__PROCESS__ID
          return APPLICATION__PROCESS__ID;
        case 2: // APPLICATION__NAME
          return APPLICATION__NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.APPLICATION__PROCESS__ID, new org.apache.thrift.meta_data.FieldMetaData("Application_Process_ID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPLICATION__NAME, new org.apache.thrift.meta_data.FieldMetaData("Application_Name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(myApplicationInformation.class, metaDataMap);
  }

  public myApplicationInformation() {
  }

  public myApplicationInformation(
    String Application_Process_ID,
    String Application_Name)
  {
    this();
    this.Application_Process_ID = Application_Process_ID;
    this.Application_Name = Application_Name;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public myApplicationInformation(myApplicationInformation other) {
    if (other.isSetApplication_Process_ID()) {
      this.Application_Process_ID = other.Application_Process_ID;
    }
    if (other.isSetApplication_Name()) {
      this.Application_Name = other.Application_Name;
    }
  }

  public myApplicationInformation deepCopy() {
    return new myApplicationInformation(this);
  }

  @Override
  public void clear() {
    this.Application_Process_ID = null;
    this.Application_Name = null;
  }

  public String getApplication_Process_ID() {
    return this.Application_Process_ID;
  }

  public myApplicationInformation setApplication_Process_ID(String Application_Process_ID) {
    this.Application_Process_ID = Application_Process_ID;
    return this;
  }

  public void unsetApplication_Process_ID() {
    this.Application_Process_ID = null;
  }

  /** Returns true if field Application_Process_ID is set (has been assigned a value) and false otherwise */
  public boolean isSetApplication_Process_ID() {
    return this.Application_Process_ID != null;
  }

  public void setApplication_Process_IDIsSet(boolean value) {
    if (!value) {
      this.Application_Process_ID = null;
    }
  }

  public String getApplication_Name() {
    return this.Application_Name;
  }

  public myApplicationInformation setApplication_Name(String Application_Name) {
    this.Application_Name = Application_Name;
    return this;
  }

  public void unsetApplication_Name() {
    this.Application_Name = null;
  }

  /** Returns true if field Application_Name is set (has been assigned a value) and false otherwise */
  public boolean isSetApplication_Name() {
    return this.Application_Name != null;
  }

  public void setApplication_NameIsSet(boolean value) {
    if (!value) {
      this.Application_Name = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case APPLICATION__PROCESS__ID:
      if (value == null) {
        unsetApplication_Process_ID();
      } else {
        setApplication_Process_ID((String)value);
      }
      break;

    case APPLICATION__NAME:
      if (value == null) {
        unsetApplication_Name();
      } else {
        setApplication_Name((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case APPLICATION__PROCESS__ID:
      return getApplication_Process_ID();

    case APPLICATION__NAME:
      return getApplication_Name();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case APPLICATION__PROCESS__ID:
      return isSetApplication_Process_ID();
    case APPLICATION__NAME:
      return isSetApplication_Name();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof myApplicationInformation)
      return this.equals((myApplicationInformation)that);
    return false;
  }

  public boolean equals(myApplicationInformation that) {
    if (that == null)
      return false;

    boolean this_present_Application_Process_ID = true && this.isSetApplication_Process_ID();
    boolean that_present_Application_Process_ID = true && that.isSetApplication_Process_ID();
    if (this_present_Application_Process_ID || that_present_Application_Process_ID) {
      if (!(this_present_Application_Process_ID && that_present_Application_Process_ID))
        return false;
      if (!this.Application_Process_ID.equals(that.Application_Process_ID))
        return false;
    }

    boolean this_present_Application_Name = true && this.isSetApplication_Name();
    boolean that_present_Application_Name = true && that.isSetApplication_Name();
    if (this_present_Application_Name || that_present_Application_Name) {
      if (!(this_present_Application_Name && that_present_Application_Name))
        return false;
      if (!this.Application_Name.equals(that.Application_Name))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_Application_Process_ID = true && (isSetApplication_Process_ID());
    list.add(present_Application_Process_ID);
    if (present_Application_Process_ID)
      list.add(Application_Process_ID);

    boolean present_Application_Name = true && (isSetApplication_Name());
    list.add(present_Application_Name);
    if (present_Application_Name)
      list.add(Application_Name);

    return list.hashCode();
  }

  @Override
  public int compareTo(myApplicationInformation other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetApplication_Process_ID()).compareTo(other.isSetApplication_Process_ID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplication_Process_ID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Application_Process_ID, other.Application_Process_ID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplication_Name()).compareTo(other.isSetApplication_Name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplication_Name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Application_Name, other.Application_Name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("myApplicationInformation(");
    boolean first = true;

    sb.append("Application_Process_ID:");
    if (this.Application_Process_ID == null) {
      sb.append("null");
    } else {
      sb.append(this.Application_Process_ID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Application_Name:");
    if (this.Application_Name == null) {
      sb.append("null");
    } else {
      sb.append(this.Application_Name);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class myApplicationInformationStandardSchemeFactory implements SchemeFactory {
    public myApplicationInformationStandardScheme getScheme() {
      return new myApplicationInformationStandardScheme();
    }
  }

  private static class myApplicationInformationStandardScheme extends StandardScheme<myApplicationInformation> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, myApplicationInformation struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // APPLICATION__PROCESS__ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Application_Process_ID = iprot.readString();
              struct.setApplication_Process_IDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // APPLICATION__NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Application_Name = iprot.readString();
              struct.setApplication_NameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, myApplicationInformation struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.Application_Process_ID != null) {
        oprot.writeFieldBegin(APPLICATION__PROCESS__ID_FIELD_DESC);
        oprot.writeString(struct.Application_Process_ID);
        oprot.writeFieldEnd();
      }
      if (struct.Application_Name != null) {
        oprot.writeFieldBegin(APPLICATION__NAME_FIELD_DESC);
        oprot.writeString(struct.Application_Name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class myApplicationInformationTupleSchemeFactory implements SchemeFactory {
    public myApplicationInformationTupleScheme getScheme() {
      return new myApplicationInformationTupleScheme();
    }
  }

  private static class myApplicationInformationTupleScheme extends TupleScheme<myApplicationInformation> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, myApplicationInformation struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetApplication_Process_ID()) {
        optionals.set(0);
      }
      if (struct.isSetApplication_Name()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetApplication_Process_ID()) {
        oprot.writeString(struct.Application_Process_ID);
      }
      if (struct.isSetApplication_Name()) {
        oprot.writeString(struct.Application_Name);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, myApplicationInformation struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.Application_Process_ID = iprot.readString();
        struct.setApplication_Process_IDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.Application_Name = iprot.readString();
        struct.setApplication_NameIsSet(true);
      }
    }
  }

}

