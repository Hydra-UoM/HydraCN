package com.uom.cse.central_node.services;


import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-12-30")
public class myFilterInformation implements org.apache.thrift.TBase<myFilterInformation, myFilterInformation._Fields>, java.io.Serializable, Cloneable, Comparable<myFilterInformation> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("myFilterInformation");

  private static final org.apache.thrift.protocol.TField FILTER__ID_FIELD_DESC = new org.apache.thrift.protocol.TField("Filter_ID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FILTER__NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("Filter_Name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField FILTER__TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("Filter_Type", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField RUNTIME__ID_FIELD_DESC = new org.apache.thrift.protocol.TField("Runtime_ID", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField FILTER__RUNTIME__ID_FIELD_DESC = new org.apache.thrift.protocol.TField("Filter_Runtime_ID", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField FILTER__LAYER__NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("Filter_Layer_Name", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField FILTER__LAYER__RUNTIME__ID_FIELD_DESC = new org.apache.thrift.protocol.TField("Filter_Layer_Runtime_ID", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new myFilterInformationStandardSchemeFactory());
    schemes.put(TupleScheme.class, new myFilterInformationTupleSchemeFactory());
  }

  public String Filter_ID; // required
  public String Filter_Name; // required
  public String Filter_Type; // required
  public String Runtime_ID; // required
  public String Filter_Runtime_ID; // required
  public String Filter_Layer_Name; // required
  public String Filter_Layer_Runtime_ID; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FILTER__ID((short)1, "Filter_ID"),
    FILTER__NAME((short)2, "Filter_Name"),
    FILTER__TYPE((short)3, "Filter_Type"),
    RUNTIME__ID((short)4, "Runtime_ID"),
    FILTER__RUNTIME__ID((short)5, "Filter_Runtime_ID"),
    FILTER__LAYER__NAME((short)6, "Filter_Layer_Name"),
    FILTER__LAYER__RUNTIME__ID((short)7, "Filter_Layer_Runtime_ID");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FILTER__ID
          return FILTER__ID;
        case 2: // FILTER__NAME
          return FILTER__NAME;
        case 3: // FILTER__TYPE
          return FILTER__TYPE;
        case 4: // RUNTIME__ID
          return RUNTIME__ID;
        case 5: // FILTER__RUNTIME__ID
          return FILTER__RUNTIME__ID;
        case 6: // FILTER__LAYER__NAME
          return FILTER__LAYER__NAME;
        case 7: // FILTER__LAYER__RUNTIME__ID
          return FILTER__LAYER__RUNTIME__ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FILTER__ID, new org.apache.thrift.meta_data.FieldMetaData("Filter_ID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILTER__NAME, new org.apache.thrift.meta_data.FieldMetaData("Filter_Name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILTER__TYPE, new org.apache.thrift.meta_data.FieldMetaData("Filter_Type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RUNTIME__ID, new org.apache.thrift.meta_data.FieldMetaData("Runtime_ID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILTER__RUNTIME__ID, new org.apache.thrift.meta_data.FieldMetaData("Filter_Runtime_ID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILTER__LAYER__NAME, new org.apache.thrift.meta_data.FieldMetaData("Filter_Layer_Name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILTER__LAYER__RUNTIME__ID, new org.apache.thrift.meta_data.FieldMetaData("Filter_Layer_Runtime_ID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(myFilterInformation.class, metaDataMap);
  }

  public myFilterInformation() {
  }

  public myFilterInformation(
    String Filter_ID,
    String Filter_Name,
    String Filter_Type,
    String Runtime_ID,
    String Filter_Runtime_ID,
    String Filter_Layer_Name,
    String Filter_Layer_Runtime_ID)
  {
    this();
    this.Filter_ID = Filter_ID;
    this.Filter_Name = Filter_Name;
    this.Filter_Type = Filter_Type;
    this.Runtime_ID = Runtime_ID;
    this.Filter_Runtime_ID = Filter_Runtime_ID;
    this.Filter_Layer_Name = Filter_Layer_Name;
    this.Filter_Layer_Runtime_ID = Filter_Layer_Runtime_ID;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public myFilterInformation(myFilterInformation other) {
    if (other.isSetFilter_ID()) {
      this.Filter_ID = other.Filter_ID;
    }
    if (other.isSetFilter_Name()) {
      this.Filter_Name = other.Filter_Name;
    }
    if (other.isSetFilter_Type()) {
      this.Filter_Type = other.Filter_Type;
    }
    if (other.isSetRuntime_ID()) {
      this.Runtime_ID = other.Runtime_ID;
    }
    if (other.isSetFilter_Runtime_ID()) {
      this.Filter_Runtime_ID = other.Filter_Runtime_ID;
    }
    if (other.isSetFilter_Layer_Name()) {
      this.Filter_Layer_Name = other.Filter_Layer_Name;
    }
    if (other.isSetFilter_Layer_Runtime_ID()) {
      this.Filter_Layer_Runtime_ID = other.Filter_Layer_Runtime_ID;
    }
  }

  public myFilterInformation deepCopy() {
    return new myFilterInformation(this);
  }

  @Override
  public void clear() {
    this.Filter_ID = null;
    this.Filter_Name = null;
    this.Filter_Type = null;
    this.Runtime_ID = null;
    this.Filter_Runtime_ID = null;
    this.Filter_Layer_Name = null;
    this.Filter_Layer_Runtime_ID = null;
  }

  public String getFilter_ID() {
    return this.Filter_ID;
  }

  public myFilterInformation setFilter_ID(String Filter_ID) {
    this.Filter_ID = Filter_ID;
    return this;
  }

  public void unsetFilter_ID() {
    this.Filter_ID = null;
  }

  /** Returns true if field Filter_ID is set (has been assigned a value) and false otherwise */
  public boolean isSetFilter_ID() {
    return this.Filter_ID != null;
  }

  public void setFilter_IDIsSet(boolean value) {
    if (!value) {
      this.Filter_ID = null;
    }
  }

  public String getFilter_Name() {
    return this.Filter_Name;
  }

  public myFilterInformation setFilter_Name(String Filter_Name) {
    this.Filter_Name = Filter_Name;
    return this;
  }

  public void unsetFilter_Name() {
    this.Filter_Name = null;
  }

  /** Returns true if field Filter_Name is set (has been assigned a value) and false otherwise */
  public boolean isSetFilter_Name() {
    return this.Filter_Name != null;
  }

  public void setFilter_NameIsSet(boolean value) {
    if (!value) {
      this.Filter_Name = null;
    }
  }

  public String getFilter_Type() {
    return this.Filter_Type;
  }

  public myFilterInformation setFilter_Type(String Filter_Type) {
    this.Filter_Type = Filter_Type;
    return this;
  }

  public void unsetFilter_Type() {
    this.Filter_Type = null;
  }

  /** Returns true if field Filter_Type is set (has been assigned a value) and false otherwise */
  public boolean isSetFilter_Type() {
    return this.Filter_Type != null;
  }

  public void setFilter_TypeIsSet(boolean value) {
    if (!value) {
      this.Filter_Type = null;
    }
  }

  public String getRuntime_ID() {
    return this.Runtime_ID;
  }

  public myFilterInformation setRuntime_ID(String Runtime_ID) {
    this.Runtime_ID = Runtime_ID;
    return this;
  }

  public void unsetRuntime_ID() {
    this.Runtime_ID = null;
  }

  /** Returns true if field Runtime_ID is set (has been assigned a value) and false otherwise */
  public boolean isSetRuntime_ID() {
    return this.Runtime_ID != null;
  }

  public void setRuntime_IDIsSet(boolean value) {
    if (!value) {
      this.Runtime_ID = null;
    }
  }

  public String getFilter_Runtime_ID() {
    return this.Filter_Runtime_ID;
  }

  public myFilterInformation setFilter_Runtime_ID(String Filter_Runtime_ID) {
    this.Filter_Runtime_ID = Filter_Runtime_ID;
    return this;
  }

  public void unsetFilter_Runtime_ID() {
    this.Filter_Runtime_ID = null;
  }

  /** Returns true if field Filter_Runtime_ID is set (has been assigned a value) and false otherwise */
  public boolean isSetFilter_Runtime_ID() {
    return this.Filter_Runtime_ID != null;
  }

  public void setFilter_Runtime_IDIsSet(boolean value) {
    if (!value) {
      this.Filter_Runtime_ID = null;
    }
  }

  public String getFilter_Layer_Name() {
    return this.Filter_Layer_Name;
  }

  public myFilterInformation setFilter_Layer_Name(String Filter_Layer_Name) {
    this.Filter_Layer_Name = Filter_Layer_Name;
    return this;
  }

  public void unsetFilter_Layer_Name() {
    this.Filter_Layer_Name = null;
  }

  /** Returns true if field Filter_Layer_Name is set (has been assigned a value) and false otherwise */
  public boolean isSetFilter_Layer_Name() {
    return this.Filter_Layer_Name != null;
  }

  public void setFilter_Layer_NameIsSet(boolean value) {
    if (!value) {
      this.Filter_Layer_Name = null;
    }
  }

  public String getFilter_Layer_Runtime_ID() {
    return this.Filter_Layer_Runtime_ID;
  }

  public myFilterInformation setFilter_Layer_Runtime_ID(String Filter_Layer_Runtime_ID) {
    this.Filter_Layer_Runtime_ID = Filter_Layer_Runtime_ID;
    return this;
  }

  public void unsetFilter_Layer_Runtime_ID() {
    this.Filter_Layer_Runtime_ID = null;
  }

  /** Returns true if field Filter_Layer_Runtime_ID is set (has been assigned a value) and false otherwise */
  public boolean isSetFilter_Layer_Runtime_ID() {
    return this.Filter_Layer_Runtime_ID != null;
  }

  public void setFilter_Layer_Runtime_IDIsSet(boolean value) {
    if (!value) {
      this.Filter_Layer_Runtime_ID = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FILTER__ID:
      if (value == null) {
        unsetFilter_ID();
      } else {
        setFilter_ID((String)value);
      }
      break;

    case FILTER__NAME:
      if (value == null) {
        unsetFilter_Name();
      } else {
        setFilter_Name((String)value);
      }
      break;

    case FILTER__TYPE:
      if (value == null) {
        unsetFilter_Type();
      } else {
        setFilter_Type((String)value);
      }
      break;

    case RUNTIME__ID:
      if (value == null) {
        unsetRuntime_ID();
      } else {
        setRuntime_ID((String)value);
      }
      break;

    case FILTER__RUNTIME__ID:
      if (value == null) {
        unsetFilter_Runtime_ID();
      } else {
        setFilter_Runtime_ID((String)value);
      }
      break;

    case FILTER__LAYER__NAME:
      if (value == null) {
        unsetFilter_Layer_Name();
      } else {
        setFilter_Layer_Name((String)value);
      }
      break;

    case FILTER__LAYER__RUNTIME__ID:
      if (value == null) {
        unsetFilter_Layer_Runtime_ID();
      } else {
        setFilter_Layer_Runtime_ID((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FILTER__ID:
      return getFilter_ID();

    case FILTER__NAME:
      return getFilter_Name();

    case FILTER__TYPE:
      return getFilter_Type();

    case RUNTIME__ID:
      return getRuntime_ID();

    case FILTER__RUNTIME__ID:
      return getFilter_Runtime_ID();

    case FILTER__LAYER__NAME:
      return getFilter_Layer_Name();

    case FILTER__LAYER__RUNTIME__ID:
      return getFilter_Layer_Runtime_ID();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FILTER__ID:
      return isSetFilter_ID();
    case FILTER__NAME:
      return isSetFilter_Name();
    case FILTER__TYPE:
      return isSetFilter_Type();
    case RUNTIME__ID:
      return isSetRuntime_ID();
    case FILTER__RUNTIME__ID:
      return isSetFilter_Runtime_ID();
    case FILTER__LAYER__NAME:
      return isSetFilter_Layer_Name();
    case FILTER__LAYER__RUNTIME__ID:
      return isSetFilter_Layer_Runtime_ID();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof myFilterInformation)
      return this.equals((myFilterInformation)that);
    return false;
  }

  public boolean equals(myFilterInformation that) {
    if (that == null)
      return false;

    boolean this_present_Filter_ID = true && this.isSetFilter_ID();
    boolean that_present_Filter_ID = true && that.isSetFilter_ID();
    if (this_present_Filter_ID || that_present_Filter_ID) {
      if (!(this_present_Filter_ID && that_present_Filter_ID))
        return false;
      if (!this.Filter_ID.equals(that.Filter_ID))
        return false;
    }

    boolean this_present_Filter_Name = true && this.isSetFilter_Name();
    boolean that_present_Filter_Name = true && that.isSetFilter_Name();
    if (this_present_Filter_Name || that_present_Filter_Name) {
      if (!(this_present_Filter_Name && that_present_Filter_Name))
        return false;
      if (!this.Filter_Name.equals(that.Filter_Name))
        return false;
    }

    boolean this_present_Filter_Type = true && this.isSetFilter_Type();
    boolean that_present_Filter_Type = true && that.isSetFilter_Type();
    if (this_present_Filter_Type || that_present_Filter_Type) {
      if (!(this_present_Filter_Type && that_present_Filter_Type))
        return false;
      if (!this.Filter_Type.equals(that.Filter_Type))
        return false;
    }

    boolean this_present_Runtime_ID = true && this.isSetRuntime_ID();
    boolean that_present_Runtime_ID = true && that.isSetRuntime_ID();
    if (this_present_Runtime_ID || that_present_Runtime_ID) {
      if (!(this_present_Runtime_ID && that_present_Runtime_ID))
        return false;
      if (!this.Runtime_ID.equals(that.Runtime_ID))
        return false;
    }

    boolean this_present_Filter_Runtime_ID = true && this.isSetFilter_Runtime_ID();
    boolean that_present_Filter_Runtime_ID = true && that.isSetFilter_Runtime_ID();
    if (this_present_Filter_Runtime_ID || that_present_Filter_Runtime_ID) {
      if (!(this_present_Filter_Runtime_ID && that_present_Filter_Runtime_ID))
        return false;
      if (!this.Filter_Runtime_ID.equals(that.Filter_Runtime_ID))
        return false;
    }

    boolean this_present_Filter_Layer_Name = true && this.isSetFilter_Layer_Name();
    boolean that_present_Filter_Layer_Name = true && that.isSetFilter_Layer_Name();
    if (this_present_Filter_Layer_Name || that_present_Filter_Layer_Name) {
      if (!(this_present_Filter_Layer_Name && that_present_Filter_Layer_Name))
        return false;
      if (!this.Filter_Layer_Name.equals(that.Filter_Layer_Name))
        return false;
    }

    boolean this_present_Filter_Layer_Runtime_ID = true && this.isSetFilter_Layer_Runtime_ID();
    boolean that_present_Filter_Layer_Runtime_ID = true && that.isSetFilter_Layer_Runtime_ID();
    if (this_present_Filter_Layer_Runtime_ID || that_present_Filter_Layer_Runtime_ID) {
      if (!(this_present_Filter_Layer_Runtime_ID && that_present_Filter_Layer_Runtime_ID))
        return false;
      if (!this.Filter_Layer_Runtime_ID.equals(that.Filter_Layer_Runtime_ID))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_Filter_ID = true && (isSetFilter_ID());
    list.add(present_Filter_ID);
    if (present_Filter_ID)
      list.add(Filter_ID);

    boolean present_Filter_Name = true && (isSetFilter_Name());
    list.add(present_Filter_Name);
    if (present_Filter_Name)
      list.add(Filter_Name);

    boolean present_Filter_Type = true && (isSetFilter_Type());
    list.add(present_Filter_Type);
    if (present_Filter_Type)
      list.add(Filter_Type);

    boolean present_Runtime_ID = true && (isSetRuntime_ID());
    list.add(present_Runtime_ID);
    if (present_Runtime_ID)
      list.add(Runtime_ID);

    boolean present_Filter_Runtime_ID = true && (isSetFilter_Runtime_ID());
    list.add(present_Filter_Runtime_ID);
    if (present_Filter_Runtime_ID)
      list.add(Filter_Runtime_ID);

    boolean present_Filter_Layer_Name = true && (isSetFilter_Layer_Name());
    list.add(present_Filter_Layer_Name);
    if (present_Filter_Layer_Name)
      list.add(Filter_Layer_Name);

    boolean present_Filter_Layer_Runtime_ID = true && (isSetFilter_Layer_Runtime_ID());
    list.add(present_Filter_Layer_Runtime_ID);
    if (present_Filter_Layer_Runtime_ID)
      list.add(Filter_Layer_Runtime_ID);

    return list.hashCode();
  }

  @Override
  public int compareTo(myFilterInformation other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFilter_ID()).compareTo(other.isSetFilter_ID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilter_ID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Filter_ID, other.Filter_ID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFilter_Name()).compareTo(other.isSetFilter_Name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilter_Name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Filter_Name, other.Filter_Name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFilter_Type()).compareTo(other.isSetFilter_Type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilter_Type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Filter_Type, other.Filter_Type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRuntime_ID()).compareTo(other.isSetRuntime_ID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRuntime_ID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Runtime_ID, other.Runtime_ID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFilter_Runtime_ID()).compareTo(other.isSetFilter_Runtime_ID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilter_Runtime_ID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Filter_Runtime_ID, other.Filter_Runtime_ID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFilter_Layer_Name()).compareTo(other.isSetFilter_Layer_Name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilter_Layer_Name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Filter_Layer_Name, other.Filter_Layer_Name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFilter_Layer_Runtime_ID()).compareTo(other.isSetFilter_Layer_Runtime_ID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilter_Layer_Runtime_ID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Filter_Layer_Runtime_ID, other.Filter_Layer_Runtime_ID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("myFilterInformation(");
    boolean first = true;

    sb.append("Filter_ID:");
    if (this.Filter_ID == null) {
      sb.append("null");
    } else {
      sb.append(this.Filter_ID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Filter_Name:");
    if (this.Filter_Name == null) {
      sb.append("null");
    } else {
      sb.append(this.Filter_Name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Filter_Type:");
    if (this.Filter_Type == null) {
      sb.append("null");
    } else {
      sb.append(this.Filter_Type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Runtime_ID:");
    if (this.Runtime_ID == null) {
      sb.append("null");
    } else {
      sb.append(this.Runtime_ID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Filter_Runtime_ID:");
    if (this.Filter_Runtime_ID == null) {
      sb.append("null");
    } else {
      sb.append(this.Filter_Runtime_ID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Filter_Layer_Name:");
    if (this.Filter_Layer_Name == null) {
      sb.append("null");
    } else {
      sb.append(this.Filter_Layer_Name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Filter_Layer_Runtime_ID:");
    if (this.Filter_Layer_Runtime_ID == null) {
      sb.append("null");
    } else {
      sb.append(this.Filter_Layer_Runtime_ID);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class myFilterInformationStandardSchemeFactory implements SchemeFactory {
    public myFilterInformationStandardScheme getScheme() {
      return new myFilterInformationStandardScheme();
    }
  }

  private static class myFilterInformationStandardScheme extends StandardScheme<myFilterInformation> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, myFilterInformation struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FILTER__ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Filter_ID = iprot.readString();
              struct.setFilter_IDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FILTER__NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Filter_Name = iprot.readString();
              struct.setFilter_NameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FILTER__TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Filter_Type = iprot.readString();
              struct.setFilter_TypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RUNTIME__ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Runtime_ID = iprot.readString();
              struct.setRuntime_IDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FILTER__RUNTIME__ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Filter_Runtime_ID = iprot.readString();
              struct.setFilter_Runtime_IDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FILTER__LAYER__NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Filter_Layer_Name = iprot.readString();
              struct.setFilter_Layer_NameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FILTER__LAYER__RUNTIME__ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Filter_Layer_Runtime_ID = iprot.readString();
              struct.setFilter_Layer_Runtime_IDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, myFilterInformation struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.Filter_ID != null) {
        oprot.writeFieldBegin(FILTER__ID_FIELD_DESC);
        oprot.writeString(struct.Filter_ID);
        oprot.writeFieldEnd();
      }
      if (struct.Filter_Name != null) {
        oprot.writeFieldBegin(FILTER__NAME_FIELD_DESC);
        oprot.writeString(struct.Filter_Name);
        oprot.writeFieldEnd();
      }
      if (struct.Filter_Type != null) {
        oprot.writeFieldBegin(FILTER__TYPE_FIELD_DESC);
        oprot.writeString(struct.Filter_Type);
        oprot.writeFieldEnd();
      }
      if (struct.Runtime_ID != null) {
        oprot.writeFieldBegin(RUNTIME__ID_FIELD_DESC);
        oprot.writeString(struct.Runtime_ID);
        oprot.writeFieldEnd();
      }
      if (struct.Filter_Runtime_ID != null) {
        oprot.writeFieldBegin(FILTER__RUNTIME__ID_FIELD_DESC);
        oprot.writeString(struct.Filter_Runtime_ID);
        oprot.writeFieldEnd();
      }
      if (struct.Filter_Layer_Name != null) {
        oprot.writeFieldBegin(FILTER__LAYER__NAME_FIELD_DESC);
        oprot.writeString(struct.Filter_Layer_Name);
        oprot.writeFieldEnd();
      }
      if (struct.Filter_Layer_Runtime_ID != null) {
        oprot.writeFieldBegin(FILTER__LAYER__RUNTIME__ID_FIELD_DESC);
        oprot.writeString(struct.Filter_Layer_Runtime_ID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class myFilterInformationTupleSchemeFactory implements SchemeFactory {
    public myFilterInformationTupleScheme getScheme() {
      return new myFilterInformationTupleScheme();
    }
  }

  private static class myFilterInformationTupleScheme extends TupleScheme<myFilterInformation> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, myFilterInformation struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetFilter_ID()) {
        optionals.set(0);
      }
      if (struct.isSetFilter_Name()) {
        optionals.set(1);
      }
      if (struct.isSetFilter_Type()) {
        optionals.set(2);
      }
      if (struct.isSetRuntime_ID()) {
        optionals.set(3);
      }
      if (struct.isSetFilter_Runtime_ID()) {
        optionals.set(4);
      }
      if (struct.isSetFilter_Layer_Name()) {
        optionals.set(5);
      }
      if (struct.isSetFilter_Layer_Runtime_ID()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetFilter_ID()) {
        oprot.writeString(struct.Filter_ID);
      }
      if (struct.isSetFilter_Name()) {
        oprot.writeString(struct.Filter_Name);
      }
      if (struct.isSetFilter_Type()) {
        oprot.writeString(struct.Filter_Type);
      }
      if (struct.isSetRuntime_ID()) {
        oprot.writeString(struct.Runtime_ID);
      }
      if (struct.isSetFilter_Runtime_ID()) {
        oprot.writeString(struct.Filter_Runtime_ID);
      }
      if (struct.isSetFilter_Layer_Name()) {
        oprot.writeString(struct.Filter_Layer_Name);
      }
      if (struct.isSetFilter_Layer_Runtime_ID()) {
        oprot.writeString(struct.Filter_Layer_Runtime_ID);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, myFilterInformation struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.Filter_ID = iprot.readString();
        struct.setFilter_IDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.Filter_Name = iprot.readString();
        struct.setFilter_NameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.Filter_Type = iprot.readString();
        struct.setFilter_TypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.Runtime_ID = iprot.readString();
        struct.setRuntime_IDIsSet(true);
      }
      if (incoming.get(4)) {
        struct.Filter_Runtime_ID = iprot.readString();
        struct.setFilter_Runtime_IDIsSet(true);
      }
      if (incoming.get(5)) {
        struct.Filter_Layer_Name = iprot.readString();
        struct.setFilter_Layer_NameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.Filter_Layer_Runtime_ID = iprot.readString();
        struct.setFilter_Layer_Runtime_IDIsSet(true);
      }
    }
  }

}

